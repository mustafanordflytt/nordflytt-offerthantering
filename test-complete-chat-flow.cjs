const puppeteer = require('puppeteer');

(async () => {
  console.log('üß™ Testar komplett fl√∂de med ChatWidget...');
  
  let browser;
  try {
    browser = await puppeteer.launch({
      headless: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    
    // Steg 1: G√• till offertsidan
    console.log('\nüìç Steg 1: Navigerar till offertsidan...');
    await page.goto('http://localhost:3000/offer/test-offer-id', {
      waitUntil: 'networkidle2'
    });
    
    // V√§nta lite
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Kolla om ChatWidget finns p√• offertsidan
    let chatWidget = await page.$('#chat-widget-container, [class*="chat-widget"]');
    if (chatWidget) {
      console.log('‚úÖ ChatWidget finns p√• offertsidan');
    }
    
    // Steg 2: Boka flytthj√§lp
    console.log('\nüìç Steg 2: Klickar p√• "Boka flytthj√§lp"...');
    try {
      await page.waitForSelector('button:has-text("Boka flytthj√§lp")', { timeout: 5000 });
      await page.click('button:has-text("Boka flytthj√§lp")');
      
      // V√§nta p√• BankID modal
      await page.waitForSelector('button:has-text("√ñppna Mobilt BankID")', { timeout: 5000 });
      console.log('‚úÖ BankID modal visas');
      
      // Klicka p√• BankID
      await page.click('button:has-text("√ñppna Mobilt BankID")');
      console.log('‚è≥ V√§ntar p√• mock BankID autentisering...');
      
      // V√§nta p√• autentisering (6 sekunder f√∂r mock)
      await new Promise(resolve => setTimeout(resolve, 6000));
      
      // Kolla om vi omdirigerats till orderbekr√§ftelse
      await page.waitForFunction(
        () => window.location.pathname.includes('/order-confirmation'),
        { timeout: 10000 }
      );
      
      console.log('‚úÖ Omdirigerad till orderbekr√§ftelsesidan!');
      const currentUrl = page.url();
      console.log('üìç Nuvarande URL:', currentUrl);
      
      // V√§nta lite s√• sidan laddar klart
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Steg 3: Kolla ChatWidget p√• orderbekr√§ftelsesidan
      console.log('\nüìç Steg 3: Kollar ChatWidget p√• orderbekr√§ftelsesidan...');
      
      // S√∂k efter ChatWidget med olika selektorer
      chatWidget = await page.$('#chat-widget-container, [class*="chat-widget"], button[aria-label*="Chat"], button[aria-label*="chat"]');
      
      if (chatWidget) {
        console.log('‚úÖ ChatWidget finns p√• orderbekr√§ftelsesidan!');
        
        // Ta screenshot
        await page.screenshot({ 
          path: 'order-confirmation-with-chat-complete.png',
          fullPage: true 
        });
        console.log('üì∏ Screenshot sparad');
        
        // F√∂rs√∂k √∂ppna chatten
        const chatButton = await page.$('button[aria-label*="Chat"], button[aria-label*="chat"]');
        if (chatButton) {
          await chatButton.click();
          console.log('üéØ Klickade p√• chat-knappen');
          
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Ta screenshot med √∂ppen chat
          await page.screenshot({ 
            path: 'order-confirmation-chat-open-complete.png',
            fullPage: true 
          });
          console.log('üì∏ Screenshot med √∂ppen chat sparad');
        }
      } else {
        console.log('‚ùå ChatWidget hittades inte p√• orderbekr√§ftelsesidan');
        
        // Ta screenshot f√∂r fels√∂kning
        await page.screenshot({ 
          path: 'order-confirmation-no-chat-debug.png',
          fullPage: true 
        });
        
        // Kolla om det finns n√•got felmeddelande
        const errorMessage = await page.$('text="Ett fel uppstod", text="Order hittades inte"');
        if (errorMessage) {
          console.log('‚ö†Ô∏è Felmeddelande visas p√• sidan');
        }
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è Kunde inte slutf√∂ra bokningsfl√∂det:', error.message);
      
      // Om vi inte kan boka, navigera direkt till en orderbekr√§ftelse
      console.log('\nüìç Alternativ: Navigerar direkt till orderbekr√§ftelse...');
      await page.goto('http://localhost:3000/order-confirmation/test-direct', {
        waitUntil: 'networkidle2'
      });
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Ta screenshot
      await page.screenshot({ 
        path: 'order-confirmation-direct-navigation.png',
        fullPage: true 
      });
    }
    
  } catch (error) {
    console.error('‚ùå Test misslyckades:', error.message);
  } finally {
    console.log('\n‚úÖ Test avslutat');
    if (browser) {
      await browser.close();
    }
  }
})();