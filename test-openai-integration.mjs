import dotenv from 'dotenv'
import { OpenAI } from 'openai'

// L√§s milj√∂variabler
dotenv.config({ path: '.env.development.local' })

console.log('ü§ñ Testar OpenAI API-integration...\n')

const apiKey = process.env.OPENAI_API_KEY

if (!apiKey) {
  console.error('‚ùå OPENAI_API_KEY saknas i .env.development.local!')
  process.exit(1)
}

console.log('‚úÖ OpenAI API-nyckel hittad')
console.log(`üìç Nyckel b√∂rjar med: ${apiKey.substring(0, 10)}...`)

try {
  const openai = new OpenAI({
    apiKey: apiKey
  })

  console.log('\nüß™ Testar API-anslutning...')
  
  const response = await openai.chat.completions.create({
    model: 'gpt-3.5-turbo',
    messages: [
      {
        role: 'system',
        content: 'Du √§r Maja, en v√§nlig kundtj√§nstmedarbetare p√• Nordflytt.'
      },
      {
        role: 'user',
        content: 'Hej! Jag beh√∂ver hj√§lp med en offert f√∂r kontorsflytt.'
      }
    ],
    max_tokens: 150,
    temperature: 0.7
  })

  console.log('\n‚úÖ API-anslutning fungerar!')
  console.log('\nü§ñ Majas svar:')
  console.log(response.choices[0].message.content)
  
  console.log('\nüìä Token-anv√§ndning:')
  console.log(`- Prompt tokens: ${response.usage?.prompt_tokens}`)
  console.log(`- Completion tokens: ${response.usage?.completion_tokens}`)
  console.log(`- Total tokens: ${response.usage?.total_tokens}`)
  
  console.log('\nüéâ OpenAI-integration √§r redo f√∂r produktion!')
  
} catch (error) {
  console.error('\n‚ùå Fel vid API-anrop:', error.message)
  
  if (error.code === 'invalid_api_key') {
    console.error('‚ö†Ô∏è  API-nyckeln √§r ogiltig')
  } else if (error.code === 'insufficient_quota') {
    console.error('‚ö†Ô∏è  API-kvoten √§r slut')
  } else {
    console.error('‚ö†Ô∏è  Kontrollera din internetanslutning och API-nyckel')
  }
  
  process.exit(1)
}