// =============================================================================
// NORDFLYTT SUPER AI - REVOLUTIONARY CHATBOT ENGINE
// Complete system integration with Phase 1-5 AI, Financial Module, Staff App
// =============================================================================

import { EnhancedBillingEngine } from '@/lib/financial/BillingEngine';
import { SmartReceiptManager } from '@/lib/financial/SmartReceiptManager';

// Types for system integration
interface CustomerContext {
  customer: any;
  active_jobs: any[];
  job_history: any[];
  invoice_status: any[];
  team_locations: any[];
  ai_insights: any;
  systems_data: {
    clustering: any;
    routes: any;
    teams: any;
    financial: any;
  };
  last_updated: Date;
  data_quality_score: number;
}

interface AIResponse {
  text: string;
  confidence: number;
  intent: string;
  revenue_opportunity: number;
  upsell_suggestions: any[];
  churn_risk: number;
  suggested_followups: string[];
  escalation_needed: boolean;
  systems_used: string[];
  data_freshness: Date;
  learning_opportunities: any[];
  business_context: any;
}

interface ConversationContext {
  conversation_id: number;
  customer_id?: number;
  channel: string;
  session_id: string;
  message_history: any[];
  customer_context?: CustomerContext;
}

// =============================================================================
// CORE AI ENGINE WITH SYSTEM INTEGRATION
// =============================================================================

export class NordflyttSuperAI {
  private nlpProcessor: SwedishNLPProcessor;
  private contextEngine: CustomerContextEngine;
  private integrationLayer: SystemIntegrationLayer;
  private revenueOptimizer: RevenueOptimizationEngine;
  private predictiveInsights: PredictiveInsightsEngine;
  private emotionalIntelligence: EmotionalIntelligenceEngine;
  private learningEngine: ContinuousLearningEngine;
  
  // System connectors
  private crmConnector: CRMConnector;
  private aiPhaseConnector: AIPhaseConnector;
  private financialConnector: FinancialModuleConnector;
  private staffAppConnector: StaffAppConnector;
  
  constructor() {
    console.log('üöÄ Initializing Nordflytt Super AI with complete system integration');
    
    // Initialize core AI components
    this.nlpProcessor = new SwedishNLPProcessor();
    this.contextEngine = new CustomerContextEngine();
    this.integrationLayer = new SystemIntegrationLayer();
    this.revenueOptimizer = new RevenueOptimizationEngine();
    this.predictiveInsights = new PredictiveInsightsEngine();
    this.emotionalIntelligence = new EmotionalIntelligenceEngine();
    this.learningEngine = new ContinuousLearningEngine();
    
    // Initialize system connectors
    this.crmConnector = new CRMConnector();
    this.aiPhaseConnector = new AIPhaseConnector();
    this.financialConnector = new FinancialModuleConnector();
    this.staffAppConnector = new StaffAppConnector();
    
    console.log('‚úÖ Nordflytt Super AI initialized with revolutionary capabilities');
  }

  // Main AI processing method with complete system integration
  async processMessageWithFullContext(
    message: string, 
    context: ConversationContext
  ): Promise<AIResponse> {
    const startTime = Date.now();
    console.log('üß† Processing message with full Nordflytt system context', {
      message: message.substring(0, 100),
      customerId: context.customer_id,
      channel: context.channel
    });

    try {
      // 1. Analyze intent with Swedish NLP
      const intent = await this.nlpProcessor.analyzeIntent(message, context);
      console.log('üéØ Intent analyzed', { intent: intent.category, confidence: intent.confidence });

      // 2. Get complete customer context from ALL systems
      const customerContext = await this.integrationLayer.getCompleteCustomerContext(
        context.customer_id,
        { message, intent, history: context.message_history }
      );

      // 3. Optimize for business value and revenue
      const revenueOptimization = await this.revenueOptimizer.optimizeForRevenue(
        customerContext,
        context.message_history
      );

      // 4. Generate intelligent response with system data
      const response = await this.generateContextualResponse(
        intent,
        customerContext,
        revenueOptimization,
        context.message_history
      );

      // 5. Add predictive intelligence
      const predictiveInsights = await this.predictiveInsights.getNextBestActions(
        context.customer_id,
        response
      );

      // 6. Emotional intelligence analysis
      const emotionalContext = await this.emotionalIntelligence.analyzeCustomerEmotion(
        message,
        context.message_history
      );

      // 7. Check for escalation needs
      const escalationNeeded = this.shouldEscalate(intent, customerContext, context.message_history, emotionalContext);

      // 8. Learning opportunities
      const learningOps = this.learningEngine.identifyLearningOpportunities(
        intent,
        customerContext,
        response
      );

      const processingTime = Date.now() - startTime;
      console.log('‚úÖ AI processing completed', { 
        processingTime: `${processingTime}ms`,
        confidence: response.confidence,
        systemsUsed: customerContext.systems_accessed?.length || 0
      });

      return {
        text: response.text,
        confidence: response.confidence,
        intent: intent.category,
        revenue_opportunity: revenueOptimization.revenue_potential || 0,
        upsell_suggestions: revenueOptimization.upsell_opportunities || [],
        churn_risk: customerContext.risk_factors?.churn_probability || 0,
        suggested_followups: predictiveInsights.suggested_actions || [],
        escalation_needed: escalationNeeded,
        systems_used: customerContext.systems_accessed || [],
        data_freshness: customerContext.last_updated,
        learning_opportunities: learningOps,
        business_context: {
          customer_value: customerContext.customer_value,
          interaction_history: customerContext.interaction_summary,
          competitive_context: customerContext.competitive_intel,
          seasonal_factors: customerContext.seasonal_context
        }
      };

    } catch (error) {
      console.error('‚ùå AI processing error:', error);
      
      // Graceful fallback
      return this.generateFallbackResponse(message, context, error);
    }
  }

  // Generate intelligent response with business context
  private async generateContextualResponse(
    intent: any,
    systemData: CustomerContext,
    revenueOpt: any,
    history: any[]
  ): Promise<any> {
    console.log('üìù Generating contextual response', { intent: intent.category });

    const templates = {
      // Booking inquiry with real-time team availability
      booking_inquiry: `
        Hej {{customer.name}}! 
        
        {{#if activeJobs}}
        Ser att din flytt {{activeJobs[0].moving_date}} n√§rmar sig! 
        Team {{teamLocation.team_name}} √§r just nu {{teamLocation.current_location}} 
        och kommer till dig kl {{activeJobs[0].time}}.
        {{else}}
        Vill du boka en flytt? Jag kan ge dig pris direkt med RUT-avdrag!
        
        {{#if phase1Data.available_teams}}
        Vi har {{phase1Data.available_teams.length}} team lediga {{intent.preferred_date}}.
        {{/if}}
        {{/if}}
        
        {{#if upsellOpportunities}}
        {{#each upsellOpportunities}}
        üí° {{this.message}}
        {{/each}}
        {{/if}}
        
        Vill du att jag bokar √•t dig? üìÖ
      `,
      
      // Price request with dynamic AI pricing
      price_request: `
        Hej {{customer.name}}! 
        
        {{#if customer.previous_moves}}
        Kul att se dig igen! Senast flyttade du fr√•n {{customer.last_move.from_address}}.
        {{/if}}
        
        Baserat p√• {{pricing.calculation_factors}} blir priset {{pricing.optimized_price}} kr 
        (ink. {{pricing.rut_deduction}} kr RUT-avdrag som du f√•r automatiskt).
        
        {{#if pricing.demand_adjustment}}
        üìä {{pricing.demand_explanation}}. Jag kan erbjuda 
        {{pricing.alternative_dates}} f√∂r {{pricing.better_price}} kr.
        {{/if}}
        
        {{#if phase4Insights.price_optimization}}
        üéØ AI-optimerat pris baserat p√• din situation och marknadstrender.
        {{/if}}
        
        Vill du boka direkt? Jag fixar allt! üöö
      `,
      
      // Team tracking with live GPS
      team_tracking: `
        Team {{team.name}} √§r just nu {{team.current_location}} 
        och ber√§knas vara hos dig {{team.eta}}! 
        
        {{#if team.running_late}}
        ‚è±Ô∏è De √§r {{team.delay_minutes}} min f√∂rsenade pga {{team.delay_reason}}, 
        men h√∂r av sig direkt n√§r de √§r p√• v√§g!
        {{else}}
        ‚úÖ De √§r i tid och p√• v√§g enligt plan!
        {{/if}}
        
        {{#if team.driver_contact}}
        Du kan ringa chauff√∂ren direkt p√• {{team.driver_phone}} om du har fr√•gor.
        {{/if}}
        
        F√∂lj dem live h√§r: {{team.tracking_link}} üìç
      `,
      
      // Complaint handling with AI insights
      complaint_resolution: `
        Jag beklagar verkligen det som h√§nt, {{customer.name}}! 
        
        {{#if aiInsights.similar_cases}}
        Jag ser att liknande situationer oftast l√∂ses genom {{aiInsights.resolution_pattern}}.
        {{/if}}
        
        {{#if customer.high_value}}
        Som en av v√•ra mest v√§rdefulla kunder prioriterar jag detta h√∂gsta.
        {{/if}}
        
        ‚úÖ Jag har notifierat {{assigned_manager.name}} som h√∂r av sig inom 30 min.
        
        üí∞ Som gottg√∂relse erbjuder jag {{compensation.amount}} kr avdrag p√• n√§sta flytt
        eller {{compensation.alternative}} om du f√∂redrar det.
        
        Vi fixar detta och ser till att du blir n√∂jd! ü§ù
      `,
      
      // Payment inquiry with financial module integration
      payment_inquiry: `
        {{#if invoice.status === "paid"}}
        ‚úÖ Din faktura {{invoice.number}} √§r betald! Tack f√∂r snabb betalning.
        
        {{#if invoice.rut_applied}}
        RUT-avdraget p√• {{invoice.rut_amount}} kr har applicerats automatiskt.
        {{/if}}
        {{else}}
        üìã Din faktura {{invoice.number}} p√• {{invoice.total_amount}} kr 
        f√∂rfaller {{invoice.due_date}}.
        
        {{#if invoice.rut_pending}}
        üí∞ Du f√•r {{invoice.rut_amount}} kr RUT-avdrag som applicerats automatiskt.
        {{/if}}
        
        {{#if invoice.overdue}}
        ‚ö†Ô∏è Fakturan √§r f√∂rfallen. Betala snarast f√∂r att undvika dr√∂jsm√•lsr√§nta.
        {{/if}}
        {{/if}}
        
        Betala enkelt via {{payment.methods}}. N√•got mer jag kan hj√§lpa med? üí≥
      `,
      
      // Competitive comparison with intelligence
      competitive_response: `
        Jag f√∂rst√•r att du j√§mf√∂r priser - det √§r smart! üí°
        
        {{#if customer.lifetime_value > 25000}}
        Som v√§rdefull kund kan jag matcha det priset och l√§gga till 
        {{bonus_service}} utan extra kostnad.
        {{/if}}
        
        Vi inkluderar alltid:
        {{#each our_advantages}}
        ‚úÖ {{this}}
        {{/each}}
        
        Plus {{rut_savings}} kr RUT-avdrag och {{unique_benefits}}.
        
        {{#if competitive_intel.weakness_spotted}}
        Var uppm√§rksam p√• att {{competitor_warning}} hos andra f√∂retag.
        {{/if}}
        
        Vill du att jag r√§knar p√• ditt specifika fall? üìä
      `
    };

    // Select appropriate template based on intent
    const templateKey = this.getTemplateKey(intent);
    const template = templates[templateKey] || templates.booking_inquiry;

    // Render template with system data
    return {
      text: this.renderTemplate(template, {
        customer: systemData.customer,
        activeJobs: systemData.active_jobs,
        teamLocation: systemData.team_locations?.[0],
        pricing: revenueOpt.optimal_pricing,
        upsellOpportunities: revenueOpt.upsell_opportunities,
        aiInsights: systemData.ai_insights,
        phase1Data: systemData.systems_data?.clustering,
        phase4Insights: systemData.ai_insights,
        invoice: systemData.invoice_status?.[0],
        team: systemData.team_locations?.[0],
        competitive_intel: systemData.competitive_intel,
        our_advantages: [
          'Professionell packning och emballering',
          'F√∂rs√§kring och skadeschutz',
          'GPS-sp√•rning av team i realtid',
          'RUT-avdrag automatiskt (50% rabatt)',
          'AI-optimerad priss√§ttning'
        ]
      }),
      confidence: this.calculateConfidence(intent, systemData),
      template_used: templateKey,
      system_data_quality: systemData.data_quality_score
    };
  }

  // Template rendering helper
  private renderTemplate(template: string, data: any): string {
    // Simple template engine - replace with Handlebars in production
    let rendered = template;
    
    // Replace simple variables
    Object.keys(data).forEach(key => {
      const value = data[key];
      if (typeof value === 'string' || typeof value === 'number') {
        rendered = rendered.replace(new RegExp(`{{${key}}}`, 'g'), String(value));
      }
    });
    
    // Handle conditionals and loops (simplified)
    rendered = this.processConditionals(rendered, data);
    rendered = this.processLoops(rendered, data);
    
    return rendered.trim();
  }

  private processConditionals(template: string, data: any): string {
    // Handle {{#if condition}} blocks
    const ifRegex = /{{#if\s+([^}]+)}}(.*?){{\/if}}/gs;
    return template.replace(ifRegex, (match, condition, content) => {
      const value = this.evaluateCondition(condition, data);
      return value ? content : '';
    });
  }

  private processLoops(template: string, data: any): string {
    // Handle {{#each array}} blocks
    const eachRegex = /{{#each\s+([^}]+)}}(.*?){{\/each}}/gs;
    return template.replace(eachRegex, (match, arrayPath, content) => {
      const array = this.getNestedValue(data, arrayPath);
      if (Array.isArray(array)) {
        return array.map(item => {
          return content.replace(/{{this\.([^}]+)}}/g, (match, prop) => {
            return item[prop] || '';
          }).replace(/{{this}}/g, item);
        }).join('');
      }
      return '';
    });
  }

  private evaluateCondition(condition: string, data: any): boolean {
    // Simple condition evaluation
    if (condition.includes('===')) {
      const [left, right] = condition.split('===').map(s => s.trim());
      return this.getNestedValue(data, left) === right.replace(/['"]/g, '');
    }
    if (condition.includes('>')) {
      const [left, right] = condition.split('>').map(s => s.trim());
      return Number(this.getNestedValue(data, left)) > Number(right);
    }
    
    // Default: check if value exists and is truthy
    return !!this.getNestedValue(data, condition);
  }

  private getNestedValue(obj: any, path: string): any {
    return path.split('.').reduce((current, key) => current?.[key], obj);
  }

  private getTemplateKey(intent: any): string {
    const intentMap = {
      'booking_inquiry': 'booking_inquiry',
      'price_request': 'price_request',
      'team_tracking': 'team_tracking',
      'complaint': 'complaint_resolution',
      'payment_inquiry': 'payment_inquiry',
      'competitive_comparison': 'competitive_response'
    };
    
    return intentMap[intent.category] || 'booking_inquiry';
  }

  private calculateConfidence(intent: any, systemData: CustomerContext): number {
    let confidence = intent.confidence || 0.7;
    
    // Boost confidence if we have good system data
    if (systemData.data_quality_score > 0.8) confidence += 0.1;
    if (systemData.customer) confidence += 0.1;
    if (systemData.systems_data) confidence += 0.05;
    
    return Math.min(confidence, 1.0);
  }

  // Escalation decision logic
  private shouldEscalate(
    intent: any, 
    systemData: CustomerContext, 
    history: any[], 
    emotionalContext: any
  ): boolean {
    // High-value customer with complaint
    if (intent.category === 'complaint' && systemData.customer_value > 50000) {
      return true;
    }
    
    // Very negative emotion detected
    if (emotionalContext.sentiment_score < 0.3) {
      return true;
    }
    
    // Complex technical issue
    if (intent.complexity_score > 0.8) {
      return true;
    }
    
    // Multiple failed attempts
    if (history.filter(h => h.confidence < 0.6).length >= 3) {
      return true;
    }
    
    return false;
  }

  // Fallback response for errors
  private generateFallbackResponse(message: string, context: ConversationContext, error: any): AIResponse {
    console.log('üîÑ Generating fallback response', { error: error.message });
    
    return {
      text: `Hej! Jag f√∂rst√•r att du beh√∂ver hj√§lp. Tyv√§rr har jag lite tekniska problem just nu, men jag kopplar dig direkt till en av v√•ra duktiga medarbetare som kan hj√§lpa dig b√§ttre. Tack f√∂r ditt t√•lamod! üôè`,
      confidence: 0.5,
      intent: 'fallback',
      revenue_opportunity: 0,
      upsell_suggestions: [],
      churn_risk: 0,
      suggested_followups: ['Kontakta m√§nsklig agent'],
      escalation_needed: true,
      systems_used: [],
      data_freshness: new Date(),
      learning_opportunities: [{
        type: 'error_handling',
        message: message,
        error: error.message,
        context: context
      }],
      business_context: {}
    };
  }
}

// =============================================================================
// SYSTEM INTEGRATION LAYER
// =============================================================================

class SystemIntegrationLayer {
  private connections: {
    phase1AI: Phase1Connector;
    phase2AI: Phase2Connector;
    phase3AI: Phase3Connector;
    phase4AI: Phase4Connector;
    phase5AI: Phase5Connector;
    financialModule: FinancialConnector;
    staffApp: StaffAppConnector;
    crmCore: CRMConnector;
  };

  constructor() {
    console.log('üîó Initializing System Integration Layer');
    this.connections = {
      phase1AI: new Phase1Connector(),
      phase2AI: new Phase2Connector(),
      phase3AI: new Phase3Connector(),
      phase4AI: new Phase4Connector(),
      phase5AI: new Phase5Connector(),
      financialModule: new FinancialConnector(),
      staffApp: new StaffAppConnector(),
      crmCore: new CRMConnector()
    };
  }

  // Get complete customer context from ALL Nordflytt systems
  async getCompleteCustomerContext(
    customerId?: number, 
    conversationContext?: any
  ): Promise<CustomerContext> {
    if (!customerId) {
      return {
        customer: null,
        active_jobs: [],
        job_history: [],
        invoice_status: [],
        team_locations: [],
        ai_insights: {},
        systems_data: { clustering: {}, routes: {}, teams: {}, financial: {} },
        last_updated: new Date(),
        data_quality_score: 0.5
      };
    }

    console.log('üìä Fetching complete customer context from all systems', { customerId });

    try {
      // Parallel fetch from all systems for maximum speed
      const [
        customerProfile,
        activeJobs,
        jobHistory,
        invoiceStatus,
        teamLocations,
        aiInsights,
        clusteringData,
        routeOptimization,
        teamAssignments,
        financialHistory
      ] = await Promise.all([
        this.connections.crmCore.getCustomer(customerId),
        this.connections.crmCore.getActiveJobs(customerId),
        this.connections.crmCore.getJobHistory(customerId, { limit: 10 }),
        this.connections.financialModule.getInvoiceStatus(customerId),
        this.connections.staffApp.getTeamLocations(),
        this.connections.phase4AI.getCustomerInsights(customerId),
        this.connections.phase1AI.getClusteringData(),
        this.connections.phase2AI.getCurrentRoutes(),
        this.connections.phase3AI.getTeamAssignments(),
        this.connections.financialModule.getFinancialHistory(customerId)
      ]);

      const context: CustomerContext = {
        customer: customerProfile,
        active_jobs: activeJobs,
        job_history: jobHistory,
        invoice_status: invoiceStatus,
        team_locations: teamLocations,
        ai_insights: aiInsights,
        systems_data: {
          clustering: clusteringData,
          routes: routeOptimization,
          teams: teamAssignments,
          financial: financialHistory
        },
        last_updated: new Date(),
        data_quality_score: this.calculateDataQualityScore([
          customerProfile, activeJobs, invoiceStatus, aiInsights
        ])
      };

      console.log('‚úÖ Complete customer context assembled', {
        customerId,
        dataQuality: context.data_quality_score,
        systemsAccessed: 8
      });

      return context;

    } catch (error) {
      console.error('‚ùå Error fetching customer context:', error);
      
      // Return partial context with error handling
      return {
        customer: await this.connections.crmCore.getCustomer(customerId).catch(() => null),
        active_jobs: [],
        job_history: [],
        invoice_status: [],
        team_locations: [],
        ai_insights: {},
        systems_data: { clustering: {}, routes: {}, teams: {}, financial: {} },
        last_updated: new Date(),
        data_quality_score: 0.3
      };
    }
  }

  private calculateDataQualityScore(dataPoints: any[]): number {
    const validPoints = dataPoints.filter(point => point && Object.keys(point).length > 0);
    return validPoints.length / dataPoints.length;
  }
}

// =============================================================================
// REVENUE OPTIMIZATION ENGINE
// =============================================================================

class RevenueOptimizationEngine {
  private upsellEngine: UpsellEngine;
  private pricingOptimizer: PricingOptimizer;
  private conversionPredictor: ConversionPredictor;

  constructor() {
    console.log('üí∞ Initializing Revenue Optimization Engine');
    this.upsellEngine = new UpsellEngine();
    this.pricingOptimizer = new PricingOptimizer();
    this.conversionPredictor = new ConversionPredictor();
  }

  // Optimize every conversation for revenue
  async optimizeForRevenue(customerContext: CustomerContext, conversationState: any[]): Promise<any> {
    console.log('üéØ Optimizing conversation for revenue');

    const opportunities = [];
    let revenue_potential = 0;

    try {
      // Identify upsell opportunities
      if (customerContext.active_jobs?.length > 0) {
        const job = customerContext.active_jobs[0];
        
        // Packing service upsell for large apartments
        if (job.apartment_size > 75 && !job.services?.includes('packing')) {
          opportunities.push({
            type: 'upsell',
            service: 'packing',
            message: `Eftersom du har en ${job.apartment_size}m¬≤ l√§genhet, sparar du 4-6h genom v√•r packservice! 200kr/l√•da.`,
            revenue_potential: 2000,
            confidence: 0.85
          });
          revenue_potential += 2000;
        }

        // Insurance upselling for valuable items
        if (job.estimated_value > 50000 && !job.insurance) {
          opportunities.push({
            type: 'insurance',
            service: 'moving_insurance',
            message: `Med v√§rdefulla saker p√• ${job.estimated_value}kr rekommenderar jag flyttf√∂rs√§kring f√∂r 500kr. Helt trygg flytt!`,
            revenue_potential: 500,
            confidence: 0.92
          });
          revenue_potential += 500;
        }

        // Storage upselling
        if (job.move_type === 'temporary' || job.storage_needed) {
          opportunities.push({
            type: 'storage',
            service: 'storage_service',
            message: `Beh√∂ver du f√∂rvaring mellan flyttarna? Vi har s√§kra lager fr√•n 800kr/m√•nad.`,
            revenue_potential: 800,
            confidence: 0.78
          });
          revenue_potential += 800;
        }
      }

      // Price optimization based on demand and customer profile
      const dynamicPricing = await this.pricingOptimizer.getOptimalPrice(
        customerContext.customer,
        conversationState,
        customerContext.ai_insights?.demand_level || 'normal'
      );

      // Customer retention strategies for high-value customers
      if (customerContext.customer?.lifetime_value > 25000) {
        opportunities.push({
          type: 'retention',
          service: 'vip_service',
          message: `Som v√§rdefull kund erbjuder jag VIP-service med dedikerat team och prioritet!`,
          revenue_potential: 1500,
          confidence: 0.88
        });
        revenue_potential += 1500;
      }

      console.log('‚úÖ Revenue optimization completed', {
        opportunities: opportunities.length,
        totalRevenuePotential: revenue_potential
      });

      return {
        upsell_opportunities: opportunities,
        optimal_pricing: dynamicPricing,
        revenue_potential: revenue_potential,
        conversion_strategy: this.getConversionStrategy(customerContext)
      };

    } catch (error) {
      console.error('‚ùå Revenue optimization error:', error);
      return {
        upsell_opportunities: [],
        optimal_pricing: null,
        revenue_potential: 0,
        conversion_strategy: 'standard'
      };
    }
  }

  private getConversionStrategy(customerContext: CustomerContext): string {
    if (customerContext.customer?.previous_moves > 2) return 'loyalty_focus';
    if (customerContext.customer?.price_sensitive) return 'value_proposition';
    if (customerContext.customer?.lifetime_value > 30000) return 'premium_service';
    return 'standard_conversion';
  }
}

// =============================================================================
// STUB CLASSES FOR SYSTEM CONNECTORS
// =============================================================================

// These would be implemented to connect to actual systems
class SwedishNLPProcessor {
  async analyzeIntent(message: string, context: any): Promise<any> {
    // Swedish NLP implementation
    const intents = {
      'pris': 'price_request',
      'boka': 'booking_inquiry', 
      'flytt': 'booking_inquiry',
      'team': 'team_tracking',
      'klagom√•l': 'complaint',
      'faktura': 'payment_inquiry',
      'billigare': 'competitive_comparison'
    };

    const words = message.toLowerCase().split(' ');
    let intent = 'general_inquiry';
    let confidence = 0.6;

    for (const word of words) {
      if (intents[word]) {
        intent = intents[word];
        confidence = 0.85;
        break;
      }
    }

    return {
      category: intent,
      confidence: confidence,
      entities: this.extractEntities(message),
      complexity_score: this.calculateComplexity(message)
    };
  }

  private extractEntities(message: string): any {
    // Extract dates, addresses, amounts, etc.
    return {
      dates: this.extractDates(message),
      addresses: this.extractAddresses(message),
      amounts: this.extractAmounts(message)
    };
  }

  private extractDates(message: string): string[] {
    // Simple date extraction - improve with proper NLP
    const datePattern = /\d{1,2}\/\d{1,2}|\d{1,2}\s+(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/gi;
    return message.match(datePattern) || [];
  }

  private extractAddresses(message: string): string[] {
    // Simple address extraction
    const addressPattern = /\w+gatan?\s+\d+|\w+v√§gen?\s+\d+/gi;
    return message.match(addressPattern) || [];
  }

  private extractAmounts(message: string): string[] {
    // Extract monetary amounts
    const amountPattern = /\d+\s*kr|\d+\s*kronor/gi;
    return message.match(amountPattern) || [];
  }

  private calculateComplexity(message: string): number {
    const words = message.split(' ').length;
    const questions = (message.match(/\?/g) || []).length;
    const complexity = Math.min((words / 20) + (questions * 0.2), 1.0);
    return complexity;
  }
}

class CustomerContextEngine {
  // Implementation for customer context management
}

class PredictiveInsightsEngine {
  async getNextBestActions(customerId?: number, response?: any): Promise<string[]> {
    // Mock implementation - replace with actual AI
    return [
      'F√∂lj upp med prisinformation',
      'F√∂resl√• l√§mpliga flyttdatum',
      'Erbjud till√§ggsservice'
    ];
  }
}

class EmotionalIntelligenceEngine {
  async analyzeCustomerEmotion(message: string, history: any[]): Promise<any> {
    // Mock emotional analysis
    const negativeWords = ['arg', 'besviken', 'd√•lig', 'problem', 'fel'];
    const positiveWords = ['bra', 'n√∂jd', 'tack', 'perfekt', 'utm√§rkt'];
    
    const words = message.toLowerCase().split(' ');
    let sentiment_score = 0.5;
    
    for (const word of words) {
      if (negativeWords.includes(word)) sentiment_score -= 0.2;
      if (positiveWords.includes(word)) sentiment_score += 0.2;
    }
    
    return {
      sentiment_score: Math.max(0, Math.min(1, sentiment_score)),
      emotion_detected: sentiment_score < 0.4 ? 'negative' : sentiment_score > 0.7 ? 'positive' : 'neutral',
      confidence: 0.75
    };
  }
}

class ContinuousLearningEngine {
  identifyLearningOpportunities(intent: any, context: CustomerContext, response: any): any[] {
    return [{
      type: 'intent_improvement',
      confidence_gap: 1.0 - intent.confidence,
      improvement_potential: 'high'
    }];
  }
}

// System connector stubs - implement with actual API calls
class CRMConnector {
  async getCustomer(id: number) { return { id, name: 'Test Customer', lifetime_value: 25000 }; }
  async getActiveJobs(id: number) { return []; }
  async getJobHistory(id: number, options: any) { return []; }
}

class Phase1Connector {
  async getClusteringData() { return { available_teams: [1, 2] }; }
}

class Phase2Connector {
  async getCurrentRoutes() { return { optimal_routes: [] }; }
}

class Phase3Connector {
  async getTeamAssignments() { return { teams: [] }; }
}

class Phase4Connector {
  async getCustomerInsights(id: number) { return { demand_level: 'normal' }; }
}

class Phase5Connector {
  // Phase 5 connector
}

class FinancialConnector {
  async getInvoiceStatus(id: number) { return []; }
  async getFinancialHistory(id: number) { return {}; }
}

class StaffAppConnector {
  async getTeamLocations() { return []; }
}

class UpsellEngine {
  // Upselling logic
}

class PricingOptimizer {
  async getOptimalPrice(customer: any, conversation: any, demand: string) {
    return {
      optimized_price: 15000,
      rut_deduction: 7500,
      calculation_factors: 'storlek, avst√•nd, tid, efterfr√•gan',
      demand_adjustment: demand === 'high' ? 'H√∂gre efterfr√•gan denna vecka' : null
    };
  }
}

class ConversionPredictor {
  // Conversion prediction logic
}

