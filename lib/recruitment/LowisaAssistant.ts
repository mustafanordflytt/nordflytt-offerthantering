// LowisaAssistant - Professional AI Recruitment Assistant for Nordflytt

interface CandidateInfo {
  id: number;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string;
  desired_position: string;
  application_date: string;
}

interface ConversationMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface InformationCompleteness {
  isComplete: boolean;
  completedAreas: number;
  totalAreas: number;
  completionRate: number;
  missing: string[];
}

export const LowisaAssistant = {
  systemPrompt: `Du √§r Lowisa, rekryteringsassistent p√• Nordflytt (flytt och st√§d). Du √§r erfaren, v√§nlig och professionell. Din uppgift √§r att samla in saknad information fr√•n kandidater genom tydlig och hj√§lpsam kommunikation p√• enkel, korrekt svenska ‚Äì anpassad √§ven f√∂r de som inte har svenska som modersm√•l. Din ton √§r alltid varm, respektfull och positiv.

üéØ Uppdrag: Analysera jobbans√∂kningar och st√§ll f√∂ljdfr√•gor om information saknas eller √§r otydlig. Guida kandidaten lugnt genom processen utan stress.

üìã Information att samla in (om saknas):
1. K√∂rkort: "Har du k√∂rkort? Vilken typ? (B, C, CE, annat)"
2. Arbetserfarenhet: "Ber√§tta om tidigare jobb inom flytt, st√§d, lager/logistik, restaurang eller bygg"  
3. Tillg√§nglighet: "Vilka dagar och tider kan du jobba? Flexibel f√∂r extra pass?"
4. Svenska spr√•kkunskaper: "Hur bra pratar och f√∂rst√•r du svenska?"

üó®Ô∏è Samtalsfl√∂de: Max 1-2 fr√•gor √•t g√•ngen, v√§nta p√• svar, bekr√§fta positivt.

‚ö° N√§r alla 4 omr√•den √§r besvarade tydligt, avsluta med: "Tack f√∂r dina svar! N√§sta steg i v√•r rekryteringsprocess √§r att du fyller i v√•rt formul√§r h√§r: https://syn7dh9e02w.typeform.com/to/pUeKubsb"`,

  welcomeMessages: {
    default: `Hej {name}! üëã

V√§lkommen till Nordflytt! Jag heter Lowisa och jag √§r h√§r f√∂r att hj√§lpa dig med din ans√∂kan.

Jag ser att du √§r intresserad av att jobba som {position}. Det l√•ter sp√§nnande!

F√∂r att kunna g√• vidare med din ans√∂kan beh√∂ver jag st√§lla n√•gra korta fr√•gor. Det tar bara n√•gra minuter.

√Ñr det okej att vi b√∂rjar?`,

    missing_info: `Hej igen {name}! 

Tack f√∂r din ans√∂kan! F√∂r att kunna matcha dig med r√§tt uppdrag beh√∂ver jag bara komplettera med lite information.

L√•t oss ta det steg f√∂r steg. üòä`
  },

  async initializeConversation(applicationId: number): Promise<string> {
    const candidate = await this.getCandidateInfo(applicationId);
    const welcomeMessage = this.welcomeMessages.default
      .replace('{name}', candidate.first_name)
      .replace('{position}', this.getPositionLabel(candidate.desired_position));
    
    return welcomeMessage;
  },

  async handleCandidateMessage(applicationId: number, message: string): Promise<string> {
    const candidate = await this.getCandidateInfo(applicationId);
    const conversationHistory = await this.getConversationHistory(applicationId);
    
    try {
      const response = await fetch('/api/openai/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [
            { role: "system", content: this.systemPrompt },
            { role: "system", content: `Kandidatinfo: ${JSON.stringify(candidate)}` },
            ...conversationHistory,
            { role: "user", content: message }
          ],
          temperature: 0.7,
          model: "gpt-4-turbo"
        })
      });

      if (!response.ok) {
        throw new Error('OpenAI API request failed');
      }

      const aiResponse = await response.json();
      const lowisaMessage = aiResponse.choices[0].message.content;

      // Save conversation to database
      await this.saveConversation(applicationId, message, 'candidate');
      await this.saveConversation(applicationId, lowisaMessage, 'lowisa');

      // Check if all required info is collected
      const infoStatus = await this.analyzeInformationCompleteness(applicationId);
      
      if (infoStatus.isComplete) {
        await this.updateCandidateStage(applicationId, 'typeform_sent');
      }

      return lowisaMessage;
    } catch (error) {
      console.error('Lowisa error:', error);
      return "Urs√§kta, jag hade tekniska problem. Kan du upprepa ditt meddelande?";
    }
  },

  async analyzeInformationCompleteness(applicationId: number): Promise<InformationCompleteness> {
    const conversations = await this.getConversationHistory(applicationId);
    const candidateMessages = conversations
      .filter((c: ConversationMessage) => c.role === 'user')
      .map((c: ConversationMessage) => c.content)
      .join(' ');

    // Analyze for required information
    const infoChecks = {
      k√∂rkort: /k√∂rkort|b-k√∂rkort|c-k√∂rkort|ce-k√∂rkort|licens|k√∂rkortet|b\s*k√∂rkort|ja.*k√∂rkort|har.*k√∂rkort/i.test(candidateMessages),
      arbetserfarenhet: /arbete|jobb|erfarenhet|arbetat|jobbat|√•r|m√•nader|flytt|st√§d|lager|logistik|restaurang|bygg/i.test(candidateMessages),
      tillg√§nglighet: /tid|dagar|vecka|m√•ndag|tisdag|onsdag|torsdag|fredag|l√∂rdag|s√∂ndag|flexibel|tillg√§nglig|kan.*jobba|pass/i.test(candidateMessages),
      svenska: /svenska|spr√•k|pratar|f√∂rst√•r|flyt|bra|utm√§rkt|modersm√•l|flytande/i.test(candidateMessages)
    };

    const completedAreas = Object.values(infoChecks).filter(Boolean).length;
    const isComplete = completedAreas >= 4;

    return {
      isComplete,
      completedAreas,
      totalAreas: 4,
      completionRate: Math.round((completedAreas / 4) * 100),
      missing: Object.keys(infoChecks).filter(key => !infoChecks[key as keyof typeof infoChecks])
    };
  },

  async getCandidateInfo(applicationId: number): Promise<CandidateInfo> {
    // In production, fetch from Supabase
    const response = await fetch(`/api/recruitment/applications/${applicationId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch candidate info');
    }
    return await response.json();
  },

  async getConversationHistory(applicationId: number): Promise<ConversationMessage[]> {
    // In production, fetch from Supabase
    const response = await fetch(`/api/recruitment/conversations/${applicationId}`);
    if (!response.ok) {
      return [];
    }
    
    const conversations = await response.json();
    return conversations.map((conv: any) => ({
      role: conv.sender === 'candidate' ? 'user' : 'assistant',
      content: conv.message
    }));
  },

  async saveConversation(applicationId: number, message: string, sender: 'candidate' | 'lowisa'): Promise<void> {
    await fetch('/api/recruitment/conversations', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        application_id: applicationId,
        message,
        sender,
        timestamp: new Date().toISOString()
      })
    });
  },

  async updateCandidateStage(applicationId: number, stage: string): Promise<void> {
    await fetch(`/api/recruitment/applications/${applicationId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        current_stage: stage,
        updated_at: new Date().toISOString()
      })
    });
  },

  getPositionLabel(position: string): string {
    const labels: Record<string, string> = {
      flyttpersonal: 'flyttpersonal',
      team_leader: 'teamledare',
      kundservice: 'kundservice',
      chauffor: 'chauff√∂r',
      koordinator: 'koordinator',
      kvalitetskontroll: 'kvalitetskontrollant'
    };
    return labels[position] || position;
  },

  // Generate smart follow-up questions based on missing info
  generateFollowUpQuestion(missing: string[]): string {
    const questions: Record<string, string> = {
      k√∂rkort: "F√∂rresten, har du k√∂rkort? Det √§r bra att veta f√∂r vissa uppdrag. üöó",
      arbetserfarenhet: "Kan du ber√§tta lite om din arbetserfarenhet? Har du jobbat med flytt, st√§d, lager eller liknande tidigare?",
      tillg√§nglighet: "Vilka dagar och tider passar det f√∂r dig att jobba? √Ñr du flexibel f√∂r extra pass?",
      svenska: "Hur bed√∂mer du dina svenskkunskaper? Vi vill vara s√§kra p√• att kommunikationen fungerar bra med b√•de kollegor och kunder. üòä"
    };

    // Pick the first missing item
    const nextQuestion = missing[0];
    return questions[nextQuestion] || "Finns det n√•got mer du vill ber√§tta om dig sj√§lv?";
  }
};