/**
 * NORDFLYTT MANDATORY VIDEO ANALYSIS
 * AI-powered video interview analysis for service positions
 */

export interface VideoPrompt {
  id: string;
  prompt: string;
  position: string;
  analysisPoints: string[];
  timeLimit: number; // seconds
  instructions: string;
}

export interface VideoAnalysisResult {
  transcript: string;
  facialAnalysis: {
    genuineSmiles: number;
    eyeContact: number;
    facialExpressions: string[];
    confidenceLevel: number;
  };
  voiceAnalysis: {
    tone: string;
    pace: string;
    clarity: number;
    enthusiasm: number;
    steadiness: number;
  };
  contentAnalysis: {
    structuredResponse: number;
    relevantExamples: number;
    serviceOrientation: number;
    problemSolvingApproach: number;
  };
  overallScores: {
    serviceCommuncation: number;
    authenticity: number;
    professionalPresentation: number;
    positionFit: number;
  };
}

export class MandatoryVideoAnalysis {
  private positionPrompts: Record<string, VideoPrompt[]> = {
    flyttpersonal: [
      {
        id: 'physical_teamwork',
        prompt: 'Ber√§tta om en situation d√§r du arbetade i team f√∂r att l√∂sa en fysiskt kr√§vande uppgift. Vad var din roll och hur bidrog du till teamets framg√•ng?',
        position: 'flyttpersonal',
        analysisPoints: ['teamwork', 'physical_readiness', 'problem_solving', 'communication'],
        timeLimit: 120,
        instructions: 'Dela en konkret situation fr√•n tidigare arbete eller privatliv. Fokusera p√• samarbete och din egen insats.'
      },
      {
        id: 'customer_conflict',
        prompt: 'En kund √§r missn√∂jd med hur ni hanterat deras m√∂bler under flytten. Hur skulle du hantera denna situation?',
        position: 'flyttpersonal',
        analysisPoints: ['customer_service', 'conflict_resolution', 'empathy', 'professionalism'],
        timeLimit: 90,
        instructions: 'Beskriv steg-f√∂r-steg hur du skulle hantera situationen. T√§nk p√• b√•de kundens k√§nslor och praktiska l√∂sningar.'
      }
    ],
    
    team_leader: [
      {
        id: 'leadership_pressure',
        prompt: 'Beskriv en situation d√§r du ledde ett team under tidspress eller stress. Vilka strategier anv√§nde du f√∂r att h√•lla teamet motiverat och produktivt?',
        position: 'team_leader',
        analysisPoints: ['leadership', 'stress_management', 'motivation_skills', 'decision_making'],
        timeLimit: 150,
        instructions: 'Ge ett konkret exempel. F√∂rklara vilka utmaningar ni stod inf√∂r och hur du ledde teamet genom dem.'
      },
      {
        id: 'team_development',
        prompt: 'Hur skulle du coacha en teammedlem som presterar under f√∂rv√§ntan? Ge ett exempel p√• din coachningsfilosofi.',
        position: 'team_leader',
        analysisPoints: ['coaching', 'empathy', 'development_mindset', 'constructive_feedback'],
        timeLimit: 120,
        instructions: 'Beskriv din approach till att utveckla medarbetare. Fokusera p√• b√•de praktiska metoder och din filosofi.'
      }
    ],
    
    kundservice: [
      {
        id: 'angry_customer_call',
        prompt: 'En kund ringer och √§r mycket arg √∂ver att deras flytt blivit f√∂rsenad. De hotar att klaga och kr√§ver omedelbar kompensation. Hur hanterar du detta samtal?',
        position: 'kundservice',
        analysisPoints: ['customer_service', 'de_escalation', 'empathy', 'solution_focus'],
        timeLimit: 100,
        instructions: 'Demonstrera hur du skulle hantera samtalet fr√•n b√∂rjan till slut. Visa b√•de empati och professionalism.'
      },
      {
        id: 'ai_collaboration',
        prompt: 'Ber√§tta om en g√•ng n√§r du l√§rt dig anv√§nda ny teknologi eller system. Hur k√§nner du inf√∂r att arbeta t√§tt med AI-verktyg i ditt dagliga arbete?',
        position: 'kundservice',
        analysisPoints: ['technology_adoption', 'learning_ability', 'ai_comfort', 'adaptability'],
        timeLimit: 110,
        instructions: 'Dela din inst√§llning till teknologi och l√§rande. Var specifik om hur du anpassar dig till nya verktyg.'
      }
    ],
    
    chauffor: [
      {
        id: 'difficult_delivery',
        prompt: 'Beskriv en utmanande k√∂rning eller leverans du genomf√∂rt. Hur s√§kerst√§llde du s√§kerhet och punktlighet trots sv√•righeter?',
        position: 'chauffor',
        analysisPoints: ['safety_focus', 'problem_solving', 'responsibility', 'time_management'],
        timeLimit: 100,
        instructions: 'Ge ett konkret exempel som visar ditt f√∂rh√•llningss√§tt till s√§kerhet och ansvar.'
      }
    ],
    
    koordinator: [
      {
        id: 'multiple_priorities',
        prompt: 'Ber√§tta om en dag n√§r du hanterade m√•nga olika projekt och deadlines samtidigt. Hur organiserade du ditt arbete och s√§kerst√§llde att inget f√∂ll mellan stolarna?',
        position: 'koordinator',
        analysisPoints: ['organization', 'multitasking', 'priority_management', 'systematic_approach'],
        timeLimit: 120,
        instructions: 'Beskriv dina strategier f√∂r planering och uppf√∂ljning. Ge konkreta exempel p√• verktyg eller metoder du anv√§nder.'
      }
    ],
    
    kvalitetskontroll: [
      {
        id: 'quality_issue',
        prompt: 'Ge ett exempel p√• n√§r du identifierat ett kvalitetsproblem och beh√∂vt kommunicera f√∂rb√§ttringsomr√•den till kollegor. Hur genomf√∂rde du detta konstruktivt?',
        position: 'kvalitetskontroll',
        analysisPoints: ['attention_to_detail', 'quality_mindset', 'constructive_feedback', 'diplomacy'],
        timeLimit: 110,
        instructions: 'Fokusera p√• b√•de din f√∂rm√•ga att uppt√§cka problem och att kommunicera f√∂rb√§ttringar p√• ett positivt s√§tt.'
      }
    ]
  };

  async createVideoAssessment(
    applicationId: number,
    positionMatch: any
  ): Promise<{
    assessmentId: string;
    prompts: VideoPrompt[];
    totalTimeEstimate: number;
    instructions: string;
  }> {
    console.log('üé• Creating video assessment for application:', applicationId);

    const position = positionMatch.position;
    const prompts = this.positionPrompts[position] || this.positionPrompts.flyttpersonal;
    
    // Add common service question for all positions
    const commonServicePrompt: VideoPrompt = {
      id: 'service_philosophy',
      prompt: 'Vad betyder god kundservice f√∂r dig? Ge ett exempel p√• n√§r du g√•tt extra l√•ngt f√∂r att hj√§lpa n√•gon.',
      position: 'common',
      analysisPoints: ['service_philosophy', 'empathy', 'dedication', 'genuine_care'],
      timeLimit: 90,
      instructions: 'Dela din syn p√• service och ett konkret exempel som visar dina v√§rderingar i praktiken.'
    };

    const allPrompts = [...prompts, commonServicePrompt];
    const totalTimeEstimate = allPrompts.reduce((sum, prompt) => sum + prompt.timeLimit, 0);

    const assessmentId = `video_${applicationId}_${Date.now()}`;

    return {
      assessmentId,
      prompts: allPrompts,
      totalTimeEstimate,
      instructions: this.generateVideoInstructions(position, allPrompts.length)
    };
  }

  private generateVideoInstructions(position: string, questionCount: number): string {
    return `
# NORDFLYTT VIDEO INTERVJU

V√§lkommen till v√•r AI-drivna videointervju! Detta √§r en viktig del av v√•r rekryteringsprocess d√§r vi f√•r m√∂jlighet att l√§ra k√§nna dig b√§ttre.

## TEKNISKA KRAV
- Stabil internetanslutning
- Webbkamera och mikrofon
- Lugn milj√∂ utan bakgrundsbrus
- Dator eller mobil med modern webbl√§sare

## F√ñRBEREDELSER
- V√§lj en neutral bakgrund
- S√§kerst√§ll god belysning p√• ditt ansikte
- Testa ljud och bild innan du b√∂rjar
- Ha ett glas vatten n√§ra till hands

## INTERVJUFORMAT
- ${questionCount} fr√•gor anpassade f√∂r positionen: ${position}
- Varje fr√•ga har en egen tidsgr√§ns
- Du kan inte g√• tillbaka till tidigare fr√•gor
- T√§nketid: 30 sekunder innan inspelning startar

## TIPS F√ñR FRAMG√ÖNG
- Titta in i kameran (inte p√• sk√§rmen) f√∂r √∂gonkontakt
- Tala tydligt och i normal hastighet
- Anv√§nd konkreta exempel fr√•n din erfarenhet
- Var dig sj√§lv - √§kthet v√§rderas h√∂gt
- Strukturera dina svar: situation ‚Üí √•tg√§rd ‚Üí resultat

## BED√ñMNING
V√•r AI analyserar:
- Kommunikationsf√∂rm√•ga och tydlighet
- Genuinhet och autenticitet
- Service-orientering och empati
- Professionell presentation
- Relevans f√∂r positionen

## SEKRETESS
- Dina videor behandlas konfidentiellt
- Endast Nordflytts rekryteringsteam har √•tkomst
- Videorna raderas efter rekryteringsprocessen

√Ñr du redo att b√∂rja? Lycka till!
    `.trim();
  }

  async analyzeVideo(
    videoFile: File,
    prompt: VideoPrompt,
    applicationId: number
  ): Promise<VideoAnalysisResult> {
    console.log('üé• Analyzing video for prompt:', prompt.id);

    try {
      // Store video file
      const videoPath = await this.storeVideoFile(videoFile, applicationId, prompt.id);

      // Generate transcript (mock implementation)
      const transcript = await this.generateTranscript(videoFile);

      // Perform analysis
      const analysis = await Promise.all([
        this.analyzeFacialExpressions(videoFile),
        this.analyzeVoiceCharacteristics(videoFile, transcript),
        this.analyzeResponseContent(transcript, prompt),
        this.calculateOverallScores(transcript, prompt)
      ]);

      const result: VideoAnalysisResult = {
        transcript,
        facialAnalysis: analysis[0],
        voiceAnalysis: analysis[1],
        contentAnalysis: analysis[2],
        overallScores: analysis[3]
      };

      // Store analysis
      await this.storeVideoAnalysis(applicationId, prompt.id, videoPath, result);

      return result;

    } catch (error) {
      console.error('‚ùå Video analysis failed:', error);
      throw new Error(`Video analysis failed: ${error.message}`);
    }
  }

  private async storeVideoFile(videoFile: File, applicationId: number, promptId: string): Promise<string> {
    // Mock implementation - in production, upload to cloud storage
    const filename = `video_${applicationId}_${promptId}_${Date.now()}.webm`;
    
    // Simulate upload
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return `/uploads/videos/${filename}`;
  }

  private async generateTranscript(videoFile: File): Promise<string> {
    // Mock transcript generation - in production, use speech-to-text API
    const mockTranscripts = [
      "Ja, hej! Jag skulle vilja ber√§tta om en situation n√§r jag arbetade p√• mitt f√∂rra jobb. Vi hade en kund som var riktigt missn√∂jd och jag f√∂rs√∂kte verkligen lyssna p√• vad de sa och f√∂rst√• deras perspektiv. Sedan f√∂rklarade jag lugnt vad som hade h√§nt och vad vi kunde g√∂ra f√∂r att l√∂sa situationen. Till slut blev kunden n√∂jd och tackade till och med f√∂r hj√§lpen.",
      
      "Teamarbete √§r superviktigt f√∂r mig. Jag kommer ih√•g n√§r vi hade ett riktigt tungt lyft p√• mitt f√∂rra jobb och en av mina kollegor s√•g ut att ha ont i ryggen. Jag f√∂reslog att vi skulle ta en paus och kolla s√• att alla m√•dde bra, och sedan hittade vi ett b√§ttre s√§tt att lyfta tillsammans. Det √§r viktigt att alla k√§nner sig trygga och att vi hj√§lps √•t.",
      
      "Min syn p√• kundservice √§r att man alltid ska s√§tta kunden f√∂rst och verkligen lyssna p√• vad de beh√∂ver. Jag minns en g√•ng n√§r en kund ringde precis n√§r vi skulle st√§nga, men de hade verkligen beh√∂vt hj√§lp s√• jag stannade kvar f√∂r att hj√§lpa dem. Det k√§ndes s√• bra att kunna l√∂sa deras problem."
    ];

    return mockTranscripts[Math.floor(Math.random() * mockTranscripts.length)];
  }

  private async analyzeFacialExpressions(videoFile: File): Promise<VideoAnalysisResult['facialAnalysis']> {
    // Mock facial analysis - in production, use computer vision APIs
    await new Promise(resolve => setTimeout(resolve, 500));

    return {
      genuineSmiles: Math.random() * 0.4 + 0.6, // 0.6-1.0
      eyeContact: Math.random() * 0.3 + 0.7, // 0.7-1.0  
      facialExpressions: ['friendly', 'attentive', 'confident'],
      confidenceLevel: Math.random() * 0.3 + 0.7 // 0.7-1.0
    };
  }

  private async analyzeVoiceCharacteristics(videoFile: File, transcript: string): Promise<VideoAnalysisResult['voiceAnalysis']> {
    // Mock voice analysis - in production, use audio analysis APIs
    await new Promise(resolve => setTimeout(resolve, 300));

    const tones = ['professional', 'friendly', 'confident', 'calm'];
    const paces = ['optimal', 'slightly fast', 'measured'];

    return {
      tone: tones[Math.floor(Math.random() * tones.length)],
      pace: paces[Math.floor(Math.random() * paces.length)],
      clarity: Math.random() * 0.2 + 0.8, // 0.8-1.0
      enthusiasm: Math.random() * 0.4 + 0.6, // 0.6-1.0
      steadiness: Math.random() * 0.3 + 0.7 // 0.7-1.0
    };
  }

  private async analyzeResponseContent(transcript: string, prompt: VideoPrompt): Promise<VideoAnalysisResult['contentAnalysis']> {
    const lowerTranscript = transcript.toLowerCase();

    // Analyze structure (intro, body, conclusion)
    const hasStructure = this.hasStructuredResponse(transcript);
    const structuredResponse = hasStructure ? 0.9 : 0.4;

    // Look for concrete examples
    const exampleIndicators = ['n√§r jag', 'en g√•ng', 'jag minns', 'till exempel', 'f√∂rra jobbet'];
    const hasExamples = exampleIndicators.some(indicator => lowerTranscript.includes(indicator));
    const relevantExamples = hasExamples ? 0.8 : 0.3;

    // Service orientation keywords
    const serviceKeywords = ['kund', 'hj√§lpa', 'service', 'lyssna', 'f√∂rst√•', 'l√∂sa', 'teamwork', 'samarbete'];
    const serviceScore = serviceKeywords.filter(keyword => lowerTranscript.includes(keyword)).length / serviceKeywords.length;
    const serviceOrientation = Math.min(1.0, serviceScore * 1.5);

    // Problem-solving approach
    const problemSolvingKeywords = ['l√∂sning', 'problem', 'strategi', 'planera', 't√§nka', 'analyze'];
    const problemSolvingScore = problemSolvingKeywords.filter(keyword => lowerTranscript.includes(keyword)).length / problemSolvingKeywords.length;
    const problemSolvingApproach = Math.min(1.0, problemSolvingScore * 1.2);

    return {
      structuredResponse,
      relevantExamples,
      serviceOrientation,
      problemSolvingApproach
    };
  }

  private hasStructuredResponse(transcript: string): boolean {
    // Check for structured response patterns
    const structureIndicators = [
      'f√∂rst', 'sedan', 'till slut', 'd√§refter',
      'situationen var', 'jag gjorde', 'resultatet blev',
      'f√∂r det f√∂rsta', 'f√∂r det andra'
    ];

    return structureIndicators.some(indicator => 
      transcript.toLowerCase().includes(indicator)
    );
  }

  private async calculateOverallScores(transcript: string, prompt: VideoPrompt): Promise<VideoAnalysisResult['overallScores']> {
    // Calculate composite scores based on analysis points
    const contentAnalysis = await this.analyzeResponseContent(transcript, prompt);
    
    // Service communication (content + structure)
    const serviceCommuncation = (contentAnalysis.serviceOrientation * 0.6) + 
                               (contentAnalysis.structuredResponse * 0.4);

    // Authenticity (examples + genuine expression)
    const authenticity = (contentAnalysis.relevantExamples * 0.7) + 
                        (Math.random() * 0.2 + 0.8) * 0.3; // Mock genuineness score

    // Professional presentation (structure + clarity)
    const professionalPresentation = (contentAnalysis.structuredResponse * 0.5) + 
                                   (Math.random() * 0.3 + 0.7) * 0.5; // Mock presentation score

    // Position fit (based on prompt-specific analysis)
    const positionFit = this.calculatePositionSpecificFit(transcript, prompt);

    return {
      serviceCommuncation: Math.round(serviceCommuncation * 100) / 100,
      authenticity: Math.round(authenticity * 100) / 100,
      professionalPresentation: Math.round(professionalPresentation * 100) / 100,
      positionFit: Math.round(positionFit * 100) / 100
    };
  }

  private calculatePositionSpecificFit(transcript: string, prompt: VideoPrompt): number {
    const lowerTranscript = transcript.toLowerCase();
    let score = 0.5; // Base score

    // Position-specific keyword matching
    const positionKeywords: Record<string, string[]> = {
      flyttpersonal: ['fysisk', 'team', 'tillsammans', 'hj√§lpa', 'lyfta', 's√§ker'],
      team_leader: ['leda', 'team', 'motivera', 'coach', 'utveckla', 'ansvar'],
      kundservice: ['kund', 'service', 'lyssna', 'hj√§lpa', 'l√∂sa', 'telefon'],
      chauffor: ['k√∂ra', 's√§ker', 'tid', 'punktlig', 'ansvar', 'navigation'],
      koordinator: ['planera', 'organisera', 'projekt', 'deadline', 'prioritera'],
      kvalitetskontroll: ['kvalitet', 'noggrann', 'kontroll', 'f√∂rb√§ttra', 'standard']
    };

    const keywords = positionKeywords[prompt.position] || [];
    const matchedKeywords = keywords.filter(keyword => lowerTranscript.includes(keyword));
    score += (matchedKeywords.length / keywords.length) * 0.4;

    // Analysis point matching
    for (const point of prompt.analysisPoints) {
      if (this.transcriptMatchesAnalysisPoint(lowerTranscript, point)) {
        score += 0.1;
      }
    }

    return Math.min(1.0, score);
  }

  private transcriptMatchesAnalysisPoint(transcript: string, point: string): boolean {
    const pointKeywords: Record<string, string[]> = {
      teamwork: ['team', 'tillsammans', 'samarbete', 'grupp'],
      customer_service: ['kund', 'service', 'hj√§lpa', 'bem√∂ta'],
      leadership: ['leda', 'ledare', 'ansvar', 'chef', 'styra'],
      problem_solving: ['problem', 'l√∂sning', 'l√∂sa', 't√§nka', 'strategi'],
      empathy: ['f√∂rst√•', 'k√§nna', 'lyssna', 'empati', 'perspektiv'],
      stress_management: ['stress', 'press', 'lugn', 'hantera', 'kontroll']
    };

    const keywords = pointKeywords[point] || [];
    return keywords.some(keyword => transcript.includes(keyword));
  }

  private async storeVideoAnalysis(
    applicationId: number,
    promptId: string,
    videoPath: string,
    analysis: VideoAnalysisResult
  ): Promise<void> {
    const response = await fetch('/api/recruitment/video-analysis', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        application_id: applicationId,
        prompt_id: promptId,
        video_file_path: videoPath,
        transcript: analysis.transcript,
        facial_analysis: analysis.facialAnalysis,
        voice_analysis: analysis.voiceAnalysis,
        content_analysis: analysis.contentAnalysis,
        service_communication_score: analysis.overallScores.serviceCommuncation,
        authenticity_score: analysis.overallScores.authenticity,
        overall_video_score: (
          analysis.overallScores.serviceCommuncation +
          analysis.overallScores.authenticity +
          analysis.overallScores.professionalPresentation +
          analysis.overallScores.positionFit
        ) / 4
      })
    });

    if (!response.ok) {
      throw new Error('Failed to store video analysis');
    }
  }

  async generateVideoSummary(applicationId: number): Promise<{
    averageScores: VideoAnalysisResult['overallScores'];
    strengths: string[];
    concerns: string[];
    recommendation: 'advance' | 'review' | 'reject';
    reasoning: string;
  }> {
    // This would fetch all video analyses for the application
    // and generate a comprehensive summary
    const mockSummary = {
      averageScores: {
        serviceCommuncation: 0.85,
        authenticity: 0.78,
        professionalPresentation: 0.82,
        positionFit: 0.79
      },
      strengths: [
        'Excellent communication skills',
        'Genuine service orientation',
        'Good use of concrete examples',
        'Professional presentation'
      ],
      concerns: [
        'Could improve eye contact',
        'Slightly rushed responses'
      ],
      recommendation: 'advance' as const,
      reasoning: 'Strong overall performance with good service mindset and communication skills. Minor areas for development do not impact core competencies.'
    };

    return mockSummary;
  }
}