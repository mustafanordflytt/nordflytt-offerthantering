import { NextRequest, NextResponse } from 'next/server'
import { parseLeadFromEmail } from '@/lib/lead-parser'
import { sendEmail } from '@/lib/email'
import { getAuthHeaders } from '@/lib/auth/token-helper'

// SendGrid Inbound Parse webhook format
interface InboundEmail {
  to: string
  from: string
  subject: string
  text?: string
  html?: string
  attachments?: number
  envelope?: {
    to: string[]
    from: string
  }
}

// OpenAI integration f√∂r intelligent parsing
async function analyzeEmailContent(email: InboundEmail) {
  const prompt = `
Analysera f√∂ljande email och avg√∂r om det √§r en flyttf√∂rfr√•gan. 
Extrahera f√∂ljande information om m√∂jligt:
- Namn
- Telefonnummer
- Email
- Fr√•n-adress
- Till-adress
- Flyttdatum
- Antal rum/storlek
- Speciella √∂nskem√•l

Email:
Fr√•n: ${email.from}
√Ñmne: ${email.subject}
Inneh√•ll: ${email.text || email.html}

Svara i JSON-format. Om det inte √§r en flyttf√∂rfr√•gan, returnera { isMovingRequest: false }
`

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: [
          {
            role: 'system',
            content: 'Du √§r en expert p√• att analysera email och extrahera information om flyttf√∂rfr√•gningar. Svara alltid i JSON-format.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.2,
        response_format: { type: "json_object" }
      })
    })

    if (!response.ok) {
      throw new Error('OpenAI API error')
    }

    const data = await response.json()
    return JSON.parse(data.choices[0].message.content)
  } catch (error) {
    console.error('Error analyzing email:', error)
    
    // Fallback: enkel regex-baserad analys
    const isMovingKeywords = /flytt|move|b√§rhj√§lp|packning|transport/i
    const isMovingRequest = isMovingKeywords.test(email.subject + ' ' + (email.text || ''))
    
    return {
      isMovingRequest,
      name: email.from.match(/^([^<]+)/)?.[1]?.trim(),
      email: email.from.match(/<(.+)>/)?.[1] || email.from,
      phone: (email.text || '').match(/(?:\+46|0)[\s-]?\d{2,3}[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}/)?.[0],
      notes: email.text || email.html || ''
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    // Verifiera webhook (om SendGrid webhook verification √§r aktiverat)
    const signature = request.headers.get('x-twilio-email-event-webhook-signature')
    // TODO: Implementera webhook verification om n√∂dv√§ndigt

    const email: InboundEmail = await request.json()
    
    console.log('üìß Received email webhook:', {
      from: email.from,
      subject: email.subject,
      to: email.to
    })

    // Analysera email-inneh√•llet
    const analysis = await analyzeEmailContent(email)
    
    if (!analysis.isMovingRequest) {
      console.log('‚ùå Not a moving request, ignoring')
      return NextResponse.json({ 
        success: true, 
        processed: false,
        reason: 'Not a moving request'
      })
    }

    // Extrahera email fr√•n from-f√§ltet
    const fromEmail = email.from.match(/<(.+)>/)?.[1] || email.from
    const fromName = email.from.match(/^([^<]+)/)?.[1]?.trim() || 'Email Lead'

    // Skapa lead via CRM API
    const leadData = {
      name: analysis.name || fromName,
      email: analysis.email || fromEmail,
      phone: analysis.phone || '',
      source: 'email' as const,
      status: 'new' as const,
      priority: 'high' as const, // Email-leads √§r ofta h√∂gt motiverade
      estimatedValue: 0, // Kan uppdateras senare
      notes: `üìß Email-f√∂rfr√•gan fr√•n ${fromEmail}\n\n√Ñmne: ${email.subject}\n\n${analysis.notes || email.text || email.html || ''}`,
      metadata: {
        emailSubject: email.subject,
        emailFrom: email.from,
        fromAddress: analysis.fromAddress,
        toAddress: analysis.toAddress,
        moveDate: analysis.moveDate,
        roomCount: analysis.roomCount,
        ...analysis
      }
    }

    // Anropa leads API
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
    const leadResponse = await fetch(`${baseUrl}/api/crm/leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...getAuthHeaders() // Anv√§nd system-token f√∂r intern kommunikation
      },
      body: JSON.stringify(leadData)
    })

    if (!leadResponse.ok) {
      throw new Error(`Failed to create lead: ${leadResponse.statusText}`)
    }

    const createdLead = await leadResponse.json()
    console.log('‚úÖ Lead created:', createdLead.lead.id)

    // Skicka automatiskt svar till kunden
    try {
      await sendEmail({
        to: fromEmail,
        subject: 'Tack f√∂r din flyttf√∂rfr√•gan - Nordflytt',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #002A5C;">Tack f√∂r din f√∂rfr√•gan!</h2>
            
            <p>Hej ${analysis.name || 'd√§r'}!</p>
            
            <p>Vi har mottagit din flyttf√∂rfr√•gan och en av v√•ra s√§ljare kommer att kontakta dig inom kort.</p>
            
            <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3 style="margin-top: 0;">Vad h√§nder nu?</h3>
              <ol>
                <li>En s√§ljare granskar din f√∂rfr√•gan</li>
                <li>Vi kontaktar dig f√∂r att bekr√§fta detaljer</li>
                <li>Du f√•r en skr√§ddarsydd offert</li>
              </ol>
            </div>
            
            <p>Om du vill komplettera med mer information kan du g√∂ra det via v√•rt formul√§r:</p>
            <a href="${process.env.NEXT_PUBLIC_BASE_URL}/form" style="display: inline-block; background: #002A5C; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">Komplettera information</a>
            
            <p style="margin-top: 30px; color: #666; font-size: 14px;">
              Med v√§nliga h√§lsningar,<br>
              Nordflytt-teamet<br>
              üìû 08-123 456 78<br>
              ‚úâÔ∏è info@nordflytt.se
            </p>
          </div>
        `,
        text: `
Tack f√∂r din f√∂rfr√•gan!

Hej ${analysis.name || 'd√§r'}!

Vi har mottagit din flyttf√∂rfr√•gan och en av v√•ra s√§ljare kommer att kontakta dig inom kort.

Vad h√§nder nu?
1. En s√§ljare granskar din f√∂rfr√•gan
2. Vi kontaktar dig f√∂r att bekr√§fta detaljer  
3. Du f√•r en skr√§ddarsydd offert

Om du vill komplettera med mer information kan du g√∂ra det via v√•rt formul√§r:
${process.env.NEXT_PUBLIC_BASE_URL}/form

Med v√§nliga h√§lsningar,
Nordflytt-teamet
üìû 08-123 456 78
‚úâÔ∏è info@nordflytt.se
        `
      })
      console.log('‚úÖ Auto-reply sent')
    } catch (emailError) {
      console.error('Failed to send auto-reply:', emailError)
      // Forts√§tt √§ven om auto-reply misslyckas
    }

    return NextResponse.json({
      success: true,
      processed: true,
      leadId: createdLead.lead.id,
      message: 'Email processed and lead created'
    })

  } catch (error) {
    console.error('‚ùå Error processing email webhook:', error)
    
    // Logga felet men returnera 200 OK f√∂r att undvika att SendGrid f√∂rs√∂ker igen
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 200 })
  }
}