import { NextResponse } from 'next/server';

// Mock conversation data
const MOCK_CONVERSATIONS: Record<number, any[]> = {
  1: [
    {
      id: 'conv-1',
      application_id: 1,
      sender: 'lowisa',
      message: 'Hej Anna! 游녦\n\nV칛lkommen till Nordflytt! Jag heter Lowisa och jag 칛r h칛r f칬r att hj칛lpa dig med din ans칬kan.\n\nJag ser att du 칛r intresserad av att jobba som flyttpersonal. Det l친ter sp칛nnande!\n\nF칬r att kunna g친 vidare med din ans칬kan beh칬ver jag st칛lla n친gra korta fr친gor. Det tar bara n친gra minuter.\n\n츿r det okej att vi b칬rjar?',
      timestamp: '2024-01-16T10:00:00Z'
    },
    {
      id: 'conv-2',
      application_id: 1,
      sender: 'candidate',
      message: 'Hej Lowisa! Ja absolut, det g친r bra.',
      timestamp: '2024-01-16T10:05:00Z'
    },
    {
      id: 'conv-3',
      application_id: 1,
      sender: 'lowisa',
      message: 'Perfekt! L친t oss b칬rja. 游땕\n\nF칬rst undrar jag - har du k칬rkort? Och i s친 fall, vilken typ? (B, C, CE eller annat)',
      timestamp: '2024-01-16T10:05:30Z'
    },
    {
      id: 'conv-4',
      application_id: 1,
      sender: 'candidate',
      message: 'Ja, jag har B-k칬rkort sedan 5 친r tillbaka.',
      timestamp: '2024-01-16T10:07:00Z'
    },
    {
      id: 'conv-5',
      application_id: 1,
      sender: 'lowisa',
      message: 'Utm칛rkt! B-k칬rkort 칛r perfekt f칬r m친nga av v친ra uppdrag. 游뚱\n\nN칛sta fr친ga - kan du ber칛tta lite om din arbetserfarenhet? Har du jobbat med flytt, st칛d, lager, restaurang eller bygg tidigare?',
      timestamp: '2024-01-16T10:07:30Z'
    }
  ],
  2: [
    {
      id: 'conv-6',
      application_id: 2,
      sender: 'lowisa',
      message: 'Hej Mohammed! 游녦\n\nV칛lkommen till Nordflytt! Jag heter Lowisa och jag 칛r h칛r f칬r att hj칛lpa dig med din ans칬kan.\n\nJag ser att du 칛r intresserad av att jobba som chauff칬r. Det l친ter sp칛nnande!\n\nF칬r att kunna g친 vidare med din ans칬kan beh칬ver jag st칛lla n친gra korta fr친gor. Det tar bara n친gra minuter.\n\n츿r det okej att vi b칬rjar?',
      timestamp: '2024-01-17T09:00:00Z'
    },
    {
      id: 'conv-7',
      application_id: 2,
      sender: 'candidate',
      message: 'Hej! Ja det 칛r ok.',
      timestamp: '2024-01-17T09:02:00Z'
    },
    {
      id: 'conv-8',
      application_id: 2,
      sender: 'lowisa',
      message: 'Bra! Jag ser i din ans칬kan att du s칬ker tj칛nst som chauff칬r. Vilken typ av k칬rkort har du?',
      timestamp: '2024-01-17T09:02:30Z'
    },
    {
      id: 'conv-9',
      application_id: 2,
      sender: 'candidate',
      message: 'Jag har CE-k칬rkort med ADR. Har k칬rt lastbil i 5 친r.',
      timestamp: '2024-01-17T09:04:00Z'
    }
  ],
  3: []
};

export async function GET(
  request: Request,
  { params }: { params: { applicationId: string } }
) {
  try {
    const applicationId = parseInt(params.applicationId);
    
    if (isNaN(applicationId)) {
      return NextResponse.json(
        { error: 'Invalid application ID' },
        { status: 400 }
      );
    }

    // In production, fetch from Supabase
    // const { data: conversations, error } = await supabase
    //   .from('recruitment_conversations')
    //   .select('*')
    //   .eq('application_id', applicationId)
    //   .order('timestamp', { ascending: true });

    const conversations = MOCK_CONVERSATIONS[applicationId] || [];

    // Calculate conversation statistics
    const stats = {
      totalMessages: conversations.length,
      candidateMessages: conversations.filter(c => c.sender === 'candidate').length,
      lowisaMessages: conversations.filter(c => c.sender === 'lowisa').length,
      lastMessageTime: conversations.length > 0 
        ? conversations[conversations.length - 1].timestamp 
        : null,
      conversationStarted: conversations.length > 0 
        ? conversations[0].timestamp 
        : null
    };

    return NextResponse.json({
      conversations,
      stats,
      application_id: applicationId
    });

  } catch (error) {
    console.error('Error fetching conversations:', error);
    return NextResponse.json(
      { 
        error: 'Failed to fetch conversations',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function POST(
  request: Request,
  { params }: { params: { applicationId: string } }
) {
  try {
    const applicationId = parseInt(params.applicationId);
    const body = await request.json();
    const { message, sender, metadata } = body;

    if (isNaN(applicationId)) {
      return NextResponse.json(
        { error: 'Invalid application ID' },
        { status: 400 }
      );
    }

    if (!message || !sender) {
      return NextResponse.json(
        { error: 'Missing required fields: message, sender' },
        { status: 400 }
      );
    }

    const newConversation = {
      id: `conv-${Date.now()}`,
      application_id: applicationId,
      message,
      sender,
      timestamp: new Date().toISOString(),
      metadata: metadata || {}
    };

    // In production, save to Supabase
    // const { data, error } = await supabase
    //   .from('recruitment_conversations')
    //   .insert(newConversation)
    //   .select()
    //   .single();

    // For demo, add to mock data
    if (!MOCK_CONVERSATIONS[applicationId]) {
      MOCK_CONVERSATIONS[applicationId] = [];
    }
    MOCK_CONVERSATIONS[applicationId].push(newConversation);

    return NextResponse.json({
      success: true,
      conversation: newConversation,
      message: 'Conversation saved successfully'
    });

  } catch (error) {
    console.error('Error saving conversation:', error);
    return NextResponse.json(
      { 
        error: 'Failed to save conversation',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}