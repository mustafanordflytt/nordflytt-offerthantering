'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'
import { 
  Calendar,
  Clock,
  MapPin,
  CheckCircle,
  AlertTriangle,
  MessageSquare,
  Truck,
  Users,
  Phone,
  Navigation as NavigationIcon,
  Battery,
  Wifi,
  WifiOff,
  Bell,
  Settings,
  LogOut,
  PlayCircle,
  PauseCircle,
  User,
  Plus,
  ShoppingCart,
  Camera,
  Sparkles
} from 'lucide-react'
import Link from 'next/link'
import TopNavigation from '@/components/staff/TopNavigation'
import AddServiceModal from '../components/AddServiceModal'
import PreStartChecklistModal from '@/components/staff/PreStartChecklistModal'
import JobDetailModal from '@/components/staff/JobDetailModal'
import PhotoReminderSystem from '@/components/staff/PhotoReminderSystem'
import { getServiceConfig, cameraHandler } from '../utils/serviceSpecific'

interface StaffMember {
  id: string
  email: string
  name: string
  role: string
  loginTime: string
}

interface TodaysJob {
  id: string
  bookingNumber: string
  customerName: string
  customerPhone: string
  fromAddress: string
  toAddress: string
  moveTime: string
  endTime: string
  status: 'upcoming' | 'in_progress' | 'completed'
  estimatedHours: number
  teamMembers: string[]
  priority: 'low' | 'medium' | 'high'
  distance: number
  serviceType: 'moving' | 'cleaning' | 'packing'
  services: string[]
  specialRequirements: string[]
  locationInfo: {
    doorCode: string
    floor: number
    elevator: boolean
    elevatorStatus: string
    parkingDistance: number
    accessNotes: string
  }
  customerNotes: string
  equipment: string[]
  volume?: number
  boxCount?: number
}

interface CheckinStatus {
  isCheckedIn: boolean
  checkinTime: string | null
  checkoutTime: string | null
  totalHours: number
  currentJob: string | null
}

export default function StaffDashboard() {
  const router = useRouter()
  const [staff, setStaff] = useState<StaffMember | null>(null)
  const [todaysJobs, setTodaysJobs] = useState<TodaysJob[]>([])
  const [checkinStatus, setCheckinStatus] = useState<CheckinStatus>({
    isCheckedIn: false,
    checkinTime: null,
    checkoutTime: null,
    totalHours: 0,
    currentJob: null
  })
  const [isOnline, setIsOnline] = useState(true)
  const [currentTime, setCurrentTime] = useState(new Date())
  const [unreadMessages, setUnreadMessages] = useState(3)
  const [isLoading, setIsLoading] = useState(true)
  const [showAddServiceModal, setShowAddServiceModal] = useState(false)
  const [selectedJobForService, setSelectedJobForService] = useState<TodaysJob | null>(null)
  const [showChecklistModal, setShowChecklistModal] = useState(false)
  const [selectedJobForStart, setSelectedJobForStart] = useState<TodaysJob | null>(null)
  const [showJobDetailModal, setShowJobDetailModal] = useState(false)
  const [selectedJobForDetail, setSelectedJobForDetail] = useState<TodaysJob | null>(null)
  const [showPhotoReminders, setShowPhotoReminders] = useState(false)
  const [selectedJobForPhotos, setSelectedJobForPhotos] = useState<TodaysJob | null>(null)
  const [photoPhase, setPhotoPhase] = useState<'before' | 'during' | 'after'>('before')
  const [viewMode, setViewMode] = useState<'cards' | 'timeline'>('cards')

  useEffect(() => {
    // Check authentication
    const authData = localStorage.getItem('staff_auth')
    if (!authData) {
      router.push('/staff')
      return
    }

    try {
      const parsedAuth = JSON.parse(authData)
      setStaff(parsedAuth)
      
      // Load mock data
      loadTodaysJobs()
      loadCheckinStatus()
    } catch (error) {
      console.error('Error parsing auth data:', error)
      router.push('/staff')
    }

    // Set up real-time clock
    const interval = setInterval(() => {
      setCurrentTime(new Date())
    }, 1000)

    // Set up online/offline detection
    const handleOnline = () => setIsOnline(true)
    const handleOffline = () => setIsOnline(false)
    
    window.addEventListener('online', handleOnline)
    window.addEventListener('offline', handleOffline)
    setIsOnline(navigator.onLine)

    // Register service worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('/sw.js')
        .then(() => console.log('Service Worker registered'))
        .catch(err => console.log('Service Worker registration failed:', err))
    }

    setIsLoading(false)

    return () => {
      clearInterval(interval)
      window.removeEventListener('online', handleOnline)
      window.removeEventListener('offline', handleOffline)
    }
  }, [router])

  const loadTodaysJobs = () => {
    // Mock data - replace with API call
    const jobs: TodaysJob[] = [
      {
        id: '1',
        bookingNumber: 'NF-59EB2CE2',
        customerName: 'Mustafa Abdulkarim',
        customerPhone: '+46 72 368 39 67',
        fromAddress: 'Arenavägen 60, Johanneshov',
        toAddress: 'Kubikvägen 11, Täby',
        moveTime: '08:00',
        endTime: '12:00',
        status: 'in_progress',
        estimatedHours: 4,
        teamMembers: ['Erik A.', 'Sofia L.'],
        priority: 'high',
        distance: 27.7,
        serviceType: 'moving',
        services: ['Packhjälp', 'Flytt', 'Flyttstädning'],
        specialRequirements: ['Piano', 'Stora möbler'],
        locationInfo: {
          doorCode: '1234A',
          floor: 3,
          elevator: false,
          elevatorStatus: 'Hiss trasig',
          parkingDistance: 45,
          accessNotes: 'Använd serviceingång på baksidan'
        },
        customerNotes: 'Kund önskar tidig start. Piano ska till övervåning.',
        equipment: ['Flyttselar', 'Kartonger (L)', 'Filtar', 'Trappkärra'],
        volume: 85,
        boxCount: 25
      },
      {
        id: '2',
        bookingNumber: 'NF-B3914890',
        customerName: 'Anna Svensson',
        customerPhone: '+46 70 123 45 67',
        fromAddress: 'Gräsmarksvägen 12, Stockholm',
        toAddress: 'Vasagatan 22, Stockholm',
        moveTime: '13:00',
        endTime: '17:00',
        status: 'upcoming',
        estimatedHours: 4,
        teamMembers: ['Marcus J.', 'Henrik K.'],
        priority: 'medium',
        distance: 15.2,
        serviceType: 'moving',
        services: ['Packhjälp', 'Flytt', 'Flyttstädning'],
        specialRequirements: ['Städservice'],
        locationInfo: {
          doorCode: '5678B',
          floor: 2,
          elevator: true,
          elevatorStatus: 'Fungerar',
          parkingDistance: 15,
          accessNotes: 'Normalt portuppgång'
        },
        customerNotes: 'Standard flytt, inga speciella krav.',
        equipment: ['Flyttselar', 'Städmaterial', 'Kartonger (M)'],
        volume: 45,
        boxCount: 15
      }
    ]
    
    setTodaysJobs(jobs)
  }

  const loadCheckinStatus = () => {
    // Mock data - replace with API call
    const saved = localStorage.getItem('staff_checkin')
    if (saved) {
      setCheckinStatus(JSON.parse(saved))
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('staff_auth')
    localStorage.removeItem('staff_checkin')
    router.push('/staff')
  }

  const handleQuickCheckin = () => {
    const now = new Date()
    const newStatus = {
      ...checkinStatus,
      isCheckedIn: !checkinStatus.isCheckedIn,
      checkinTime: !checkinStatus.isCheckedIn ? now.toISOString() : checkinStatus.checkinTime,
      checkoutTime: checkinStatus.isCheckedIn ? now.toISOString() : null
    }
    
    setCheckinStatus(newStatus)
    localStorage.setItem('staff_checkin', JSON.stringify(newStatus))
  }

  const getJobStatusColor = (status: string) => {
    switch (status) {
      case 'upcoming': return 'bg-blue-500 text-white'
      case 'in_progress': return 'bg-green-500 text-white'
      case 'completed': return 'bg-gray-500 text-white'
      default: return 'bg-gray-400 text-white'
    }
  }

  const getJobStatusText = (status: string) => {
    switch (status) {
      case 'upcoming': return '⏰ Kommande'
      case 'in_progress': return '▶️ Pågående'
      case 'completed': return '✓ Slutfört'
      default: return status
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-500 text-white'
      case 'medium': return 'bg-orange-500 text-white'
      case 'low': return 'bg-blue-500 text-white'
      default: return 'bg-gray-400 text-white'
    }
  }

  const getGreeting = () => {
    const hour = new Date().getHours()
    if (hour < 12) return 'God morgon'
    if (hour < 17) return 'God eftermiddag'
    return 'God kväll'
  }

  const getInitials = (name: string) => {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)
  }

  const formatTime = (time: Date) => {
    return time.toLocaleTimeString('sv-SE', { 
      hour: '2-digit', 
      minute: '2-digit',
      second: '2-digit'
    })
  }

  const formatDuration = (start: string, end?: string) => {
    const startTime = new Date(start)
    const endTime = end ? new Date(end) : new Date()
    const diffMs = endTime.getTime() - startTime.getTime()
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60))
    const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60))
    return `${diffHours}h ${diffMinutes}m`
  }

  const getServiceTypeIcon = (serviceType: string) => {
    switch (serviceType) {
      case 'moving': return '🚚'
      case 'cleaning': return '🧹'
      case 'packing': return '📦'
      default: return '📋'
    }
  }

  const getServiceTypeColor = (serviceType: string) => {
    switch (serviceType) {
      case 'moving': return 'text-[#002A5C] bg-blue-50'
      case 'cleaning': return 'text-green-700 bg-green-50'
      case 'packing': return 'text-orange-700 bg-orange-50'
      default: return 'text-gray-700 bg-gray-50'
    }
  }

  const getServiceTypeName = (serviceType: string) => {
    switch (serviceType) {
      case 'moving': return 'FLYTT'
      case 'cleaning': return 'STÄDNING'
      case 'packing': return 'PACKNING'
      default: return 'TJÄNST'
    }
  }


  const handleAddServiceToJob = (job: TodaysJob) => {
    setSelectedJobForService(job)
    setShowAddServiceModal(true)
  }

  const handleServiceAdded = (services: any[]) => {
    // TODO: Update job data with new services
    console.log('Services added to job:', selectedJobForService?.id, services)
    // Here you would typically update the job data and trigger re-render
  }

  const handleStartJobClick = (job: TodaysJob) => {
    setSelectedJobForStart(job)
    setShowChecklistModal(true)
  }

  const handleJobStart = () => {
    if (!selectedJobForStart) return

    console.log('Job started:', selectedJobForStart.id)
    
    // Update job status to in_progress
    setTodaysJobs(prev => 
      prev.map(job => 
        job.id === selectedJobForStart.id 
          ? { ...job, status: 'in_progress' as const }
          : job
      )
    )

    // Trigger smart photo reminders for "before" phase
    setSelectedJobForPhotos(selectedJobForStart)
    setPhotoPhase('before')
    setShowPhotoReminders(true)
  }

  const handleJobCardClick = (job: TodaysJob) => {
    setSelectedJobForDetail(job)
    setShowJobDetailModal(true)
  }

  const handleAddServiceFromDetail = (jobId: string) => {
    const job = todaysJobs.find(j => j.id === jobId)
    if (job) {
      setSelectedJobForService(job)
      setShowAddServiceModal(true)
      setShowJobDetailModal(false)
    }
  }

  if (isLoading || !staff) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#002A5C] mx-auto"></div>
          <p className="mt-4 text-gray-600">Laddar dashboard...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top Navigation */}
      <TopNavigation unreadMessages={unreadMessages} />
      
      {/* Header */}
      <header className="bg-[#002A5C] text-white sticky top-0 z-40">
        <div className="px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Avatar className="h-10 w-10">
                <AvatarFallback className="bg-white text-[#002A5C] font-bold">
                  {getInitials(staff.name)}
                </AvatarFallback>
              </Avatar>
              <div>
                <p className="font-medium">{getGreeting()}, {staff.name.split(' ')[0]}!</p>
                <p className="text-sm text-blue-100">{staff.role}</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <div className="flex items-center space-x-1">
                {isOnline ? (
                  <Wifi className="h-4 w-4 text-green-400" />
                ) : (
                  <WifiOff className="h-4 w-4 text-red-400" />
                )}
                <Battery className="h-4 w-4 text-green-400" />
              </div>
              <Button variant="ghost" size="sm" className="text-white hover:bg-white/20">
                <Bell className="h-5 w-5" />
                {unreadMessages > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {unreadMessages}
                  </span>
                )}
              </Button>
              <Button variant="ghost" size="sm" className="text-white hover:bg-white/20" onClick={handleLogout}>
                <LogOut className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="p-4 space-y-4">

        {/* Check-in Status - Moved up for better hierarchy */}
        {checkinStatus.isCheckedIn && (
          <Card className="border-green-200 bg-green-50">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="h-3 w-3 bg-green-500 rounded-full animate-pulse"></div>
                  <div>
                    <p className="font-medium text-green-800">Incheckad</p>
                    <p className="text-sm text-green-600">
                      Sedan {new Date(checkinStatus.checkinTime!).toLocaleTimeString('sv-SE', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </p>
                  </div>
                </div>
                <Link href="/staff/checkin">
                  <Button variant="outline" size="sm">
                    Detaljer
                  </Button>
                </Link>
              </div>
            </CardContent>
          </Card>
        )}


        {/* Today's Jobs */}
        <Card className="overflow-hidden">
          <CardHeader className="pb-3">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-2">
                <Calendar className="h-5 w-5 text-[#002A5C]" />
                <span>Dagens Uppdrag</span>
              </CardTitle>
              <div className="flex items-center space-x-2">
                <div className="bg-gray-100 rounded-lg p-1 flex">
                  <Button 
                    variant={viewMode === 'cards' ? 'default' : 'ghost'}
                    size="sm"
                    className="h-7 px-3 text-xs"
                    onClick={() => setViewMode('cards')}
                  >
                    Kort
                  </Button>
                  <Button 
                    variant={viewMode === 'timeline' ? 'default' : 'ghost'}
                    size="sm"
                    className="h-7 px-3 text-xs"
                    onClick={() => setViewMode('timeline')}
                  >
                    Tidslinje
                  </Button>
                </div>
                <Link href="/staff/schedule">
                  <Button variant="outline" size="sm">
                    Visa alla
                  </Button>
                </Link>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-4 space-y-4 overflow-hidden">
            {todaysJobs.length === 0 ? (
              <div className="text-center py-8">
                <Calendar className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                <p className="text-gray-600">Inga uppdrag idag</p>
                <p className="text-sm text-gray-500">Njut av din lediga dag!</p>
              </div>
            ) : viewMode === 'timeline' ? (
              // TIDSLINJE-VY - Bonus funktionalitet
              <div className="space-y-3">
                <div className="text-sm font-medium text-gray-700 mb-4">📅 Dagens schema</div>
                {todaysJobs.map((job) => {
                  const services = ['Packhjälp', 'Flytt', 'Flyttstädning']
                  const timeRanges = ['08:00-12:00', '12:00-16:00', '16:00-20:00']
                  
                  return (
                    <div key={job.id} className="bg-gray-50 rounded-lg p-3 space-y-2">
                      <div className="flex items-center justify-between">
                        <h3 className="font-medium text-gray-900">{job.customerName}</h3>
                        <Badge className={getJobStatusColor(job.status)}>
                          {getJobStatusText(job.status)}
                        </Badge>
                      </div>
                      
                      <div className="space-y-2">
                        {services.map((service, idx) => {
                          const serviceConfig = getServiceConfig(service, job)
                          return (
                            <div 
                              key={idx} 
                              className={`flex items-center justify-between p-2 rounded border cursor-pointer hover:shadow-sm transition-all ${serviceConfig.bgColor}`}
                              onClick={() => handleJobCardClick(job)}
                            >
                              <div className="flex items-center space-x-2">
                                <span>{serviceConfig.emoji}</span>
                                <span className="text-sm font-medium">{service}</span>
                              </div>
                              <div className="text-right">
                                <div className="text-sm font-medium text-gray-700">{timeRanges[idx]}</div>
                                <div className="text-xs text-gray-500">4h estimated</div>
                              </div>
                            </div>
                          )
                        })}
                      </div>
                      
                      <div className="flex items-center text-xs text-gray-500 pt-2 border-t border-gray-200">
                        <MapPin className="h-3 w-3 mr-1" />
                        <span className="truncate">{job.toAddress}</span>
                      </div>
                    </div>
                  )
                })}
              </div>
            ) : (
              todaysJobs.map((job) => {
                // Separera tjänster i egna kort med korrekt tidshantering
                return job.services.map((service, serviceIndex) => {
                  const serviceConfig = getServiceConfig(service, job)
                  
                  return (
                    <div 
                      key={`${job.id}-${serviceIndex}`} 
                      className={`bg-white border-2 border-gray-200 rounded-lg p-4 cursor-pointer hover:border-blue-300 hover:shadow-md transition-all duration-200 overflow-hidden`}
                      onClick={() => handleJobCardClick(job)}
                    >
                      {/* Tjänstespecifik checklista */}
                      <div className={`mb-4 p-3 rounded-lg border ${serviceConfig.bgColor}`}>
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="text-lg">{serviceConfig.emoji}</span>
                          <span className={`text-sm font-medium ${serviceConfig.color}`}>Checklista för {serviceConfig.name}</span>
                        </div>
                        <div className="space-y-2">
                          {serviceConfig.checklistItems.map((item, idx) => (
                            <div key={idx} className="flex items-center space-x-2 text-xs">
                              <input type="checkbox" className="rounded w-3 h-3" />
                              <span className={serviceConfig.color}>{item}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Huvud med rätt tid per tjänst */}
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{serviceConfig.emoji}</span>
                          <div>
                            <h3 className="text-lg font-bold text-gray-900">{job.customerName}</h3>
                            <div className="flex items-center space-x-2 text-sm text-gray-600">
                              <Badge className={`${serviceConfig.bgColor} ${serviceConfig.color} text-xs px-2 py-1`}>
                                {serviceConfig.name}
                              </Badge>
                              <Clock className="h-4 w-4" />
                              <span className="font-medium">{serviceConfig.timeRange}</span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <Badge className={getJobStatusColor(job.status)}>
                            {getJobStatusText(job.status)}
                          </Badge>
                          {job.priority === 'high' && (
                            <div className="text-xs text-red-600 font-medium mt-1">⚠️ Hög prioritet</div>
                          )}
                        </div>
                      </div>

                      {/* Tjänstespecifik systemrekommendation */}
                      <div className="mb-4 p-3 bg-green-50 rounded-lg border border-green-200">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            <Sparkles className="h-4 w-4 text-green-600" />
                            <span className="text-sm font-medium text-green-800">Smart rekommendation</span>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            className="h-6 w-6 p-0 text-green-600 hover:text-green-800"
                            onClick={(e) => {
                              e.stopPropagation()
                              const extraCost = (
                                (job.locationInfo.parkingDistance > 20 ? (job.locationInfo.parkingDistance - 20) * 99 : 0) +
                                (!job.locationInfo.elevator && job.locationInfo.floor > 1 ? job.locationInfo.floor * 200 : 0)
                              )
                              alert(`📝 Automatiska tillägg för ${serviceConfig.name}:\n\n${extraCost > 0 ? `Extra kostnad: ${extraCost} kr\n` : 'Inga extra kostnader.'}\nKlicka OK för att godkänna.`)
                            }}
                          >
                            <Settings className="h-3 w-3" />
                          </Button>
                        </div>
                        <p className="text-xs text-green-700 leading-relaxed mb-4">
                          {serviceConfig.systemRecommendation}
                        </p>
                      </div>

                      {/* Verifiering av förhållanden på plats */}
                      <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                          <div className="font-medium text-yellow-800 mb-3 flex items-center">
                            <span className="mr-2">⚠️</span>
                            Verifiera på plats (kundens uppgifter kan vara felaktiga)
                          </div>
                          
                          <div className="space-y-4">
                            {/* Parkering verifiering */}
                            <div className="bg-white p-4 rounded-lg border shadow-sm">
                              <div className="text-xs text-gray-600 mb-2">
                                Kund angav: {job.locationInfo.parkingDistance}m parkering
                              </div>
                              <label className="block text-xs font-medium text-gray-700 mb-2">
                                Parkering enligt verklighet:
                              </label>
                              <div className="flex items-center space-x-3 mb-2">
                                <input 
                                  type="number" 
                                  className="w-20 px-3 py-2 text-sm border rounded-md focus:ring-2 focus:ring-blue-500"
                                  placeholder={job.locationInfo.parkingDistance.toString()}
                                  min="0"
                                />
                                <span className="text-sm text-gray-600">meter</span>
                                <button className="text-sm bg-blue-600 text-white px-3 py-2 rounded-md hover:bg-blue-700">
                                  Beräkna
                                </button>
                              </div>
                              <div className="text-xs text-gray-500 mt-2 p-2 bg-gray-50 rounded">
                                💰 Tillägg: 99kr/meter över 20m
                              </div>
                            </div>

                            {/* Våning/hiss verifiering */}
                            <div className="bg-white p-4 rounded-lg border shadow-sm">
                              <div className="text-xs text-gray-600 mb-2">
                                Kund angav: Våning {job.locationInfo.floor}, {job.locationInfo.elevator ? 'Hiss finns' : 'Ingen hiss'}
                              </div>
                              <div className="space-y-3">
                                <label className="flex items-center space-x-2">
                                  <input type="checkbox" className="w-4 h-4 rounded" />
                                  <span className="text-sm text-gray-700">Hiss fungerar</span>
                                </label>
                                <div className="flex items-center space-x-3">
                                  <span className="text-sm text-gray-700">Våning:</span>
                                  <input 
                                    type="number" 
                                    className="w-16 px-3 py-2 text-sm border rounded-md focus:ring-2 focus:ring-blue-500"
                                    placeholder={job.locationInfo.floor.toString()}
                                    min="0"
                                  />
                                </div>
                              </div>
                              <div className="text-xs text-gray-500 mt-3 p-2 bg-gray-50 rounded">
                                💰 Tillägg: 200kr/våning utan hiss
                              </div>
                            </div>

                            <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded-lg">
                              💡 Fyll i faktisk distans på plats. Automatisk beräkning görs efter det.
                            </div>
                          </div>
                      </div>

                      {/* Adress och varningar med bättre layout */}
                      <div className="space-y-3 mb-6">
                        <div className="flex items-center text-sm text-gray-700">
                          <MapPin className="h-4 w-4 mr-2 text-gray-500 flex-shrink-0" />
                          <span className="truncate">{job.toAddress}</span>
                        </div>
                        
                        {/* Kritiska varningar */}
                        {!job.locationInfo.elevator && job.locationInfo.floor > 1 && (
                          <div className="flex items-center text-sm text-red-600 bg-red-50 px-4 py-3 rounded-lg">
                            <AlertTriangle className="h-4 w-4 mr-3 flex-shrink-0" />
                            <span>Våning {job.locationInfo.floor} - Ingen hiss tillgänglig</span>
                          </div>
                        )}
                        
                        {job.locationInfo.elevatorStatus !== 'Fungerar' && job.locationInfo.elevator && (
                          <div className="flex items-center text-sm text-red-600 bg-red-50 px-4 py-3 rounded-lg">
                            <AlertTriangle className="h-4 w-4 mr-3 flex-shrink-0" />
                            <span>{job.locationInfo.elevatorStatus}</span>
                          </div>
                        )}
                        
                        {job.locationInfo.parkingDistance > 20 && (
                          <div className="flex items-center text-sm text-orange-600 bg-orange-50 px-4 py-3 rounded-lg">
                            <AlertTriangle className="h-4 w-4 mr-3 flex-shrink-0" />
                            <span>Lång parkeringsdistans: {job.locationInfo.parkingDistance}m</span>
                          </div>
                        )}
                      </div>

                      {/* Enkel åtgärdsmeny - endast en instans */}
                      <div className="pt-6 border-t border-gray-200 mt-6">
                        <div className="grid grid-cols-3 gap-4 mb-4">
                          <Button 
                            variant="outline"
                            size="sm"
                            className="h-12 text-xs flex flex-col items-center justify-center p-3"
                            onClick={(e) => {
                              e.stopPropagation()
                              window.open(`tel:${job.customerPhone}`)
                            }}
                          >
                            <Phone className="h-4 w-4 mb-1" />
                            <span>Ring kund</span>
                          </Button>
                          
                          <Button 
                            variant="outline"
                            size="sm"
                            className="h-12 text-xs flex flex-col items-center justify-center p-3"
                            onClick={(e) => {
                              e.stopPropagation()
                              const mapUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(job.toAddress)}`
                              window.open(mapUrl, '_blank')
                            }}
                          >
                            <NavigationIcon className="h-4 w-4 mb-1" />
                            <span>Navigera</span>
                          </Button>
                          
                          <Button 
                            variant="outline"
                            size="sm"
                            className="h-11 text-xs flex flex-col items-center justify-center p-2 bg-blue-50 border-blue-200 text-blue-700"
                            onClick={async (e) => {
                              e.stopPropagation()
                              await cameraHandler(serviceConfig.name)
                            }}
                          >
                            <Camera className="h-4 w-4 mb-1" />
                            <span>Ta foto</span>
                          </Button>
                        </div>
                        
                        {/* Huvudknapp beroende på status */}
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500">Tryck på kortet för detaljer</span>
                          {job.status === 'upcoming' && (
                            <Button 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleStartJobClick(job)
                              }}
                              className="bg-green-600 hover:bg-green-700 text-white h-9"
                            >
                              <PlayCircle className="h-4 w-4 mr-1" />
                              Starta {serviceConfig.name}
                            </Button>
                          )}
                          {job.status === 'in_progress' && (
                            <Button 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleAddServiceToJob(job)
                              }}
                              className="bg-blue-600 hover:bg-blue-700 text-white h-9"
                            >
                              <Plus className="h-4 w-4 mr-1" />
                              Lägg till tjänst
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  )
                })
              }).flat()
            )}
          </CardContent>
        </Card>

        {/* Compact Stats Bar */}
        <div className="bg-gray-50 rounded-lg p-3 flex justify-around items-center">
          <div className="text-center">
            <div className="flex items-center space-x-1">
              <Truck className="h-5 w-5 text-[#002A5C]" />
              <span className="text-lg font-bold">{todaysJobs.length}</span>
            </div>
            <p className="text-xs text-gray-600">Uppdrag</p>
          </div>
          <div className="h-8 w-px bg-gray-300"></div>
          <div className="text-center">
            <div className="flex items-center space-x-1">
              <Clock className="h-5 w-5 text-blue-600" />
              <span className="text-lg font-bold">{todaysJobs.reduce((sum, job) => sum + job.estimatedHours, 0)}h</span>
            </div>
            <p className="text-xs text-gray-600">Totalt</p>
          </div>
          <div className="h-8 w-px bg-gray-300"></div>
          <div className="text-center">
            <div className="flex items-center space-x-1">
              <Users className="h-5 w-5 text-green-600" />
              <span className="text-lg font-bold">{new Set(todaysJobs.flatMap(job => job.teamMembers)).size}</span>
            </div>
            <p className="text-xs text-gray-600">I teamet</p>
          </div>
        </div>
        
        {/* Quick Actions - Compact */}
        <div className="grid grid-cols-2 gap-3">
          <Button
            onClick={handleQuickCheckin}
            className={`h-14 text-base font-semibold ${
              checkinStatus.isCheckedIn 
                ? 'bg-red-600 hover:bg-red-700' 
                : 'bg-green-600 hover:bg-green-700'
            }`}
          >
            <div className="flex items-center space-x-2">
              {checkinStatus.isCheckedIn ? (
                <>
                  <PauseCircle className="h-5 w-5" />
                  <span>Checka ut</span>
                </>
              ) : (
                <>
                  <PlayCircle className="h-5 w-5" />
                  <span>Checka in</span>
                </>
              )}
            </div>
          </Button>
          
          <Link href="/staff/chat">
            <Button className="h-14 w-full bg-blue-600 hover:bg-blue-700 text-base font-semibold relative">
              <div className="flex items-center space-x-2">
                <MessageSquare className="h-5 w-5" />
                <span>Team Chat</span>
                {unreadMessages > 0 && (
                  <Badge className="bg-red-500 text-white text-xs absolute -top-2 -right-2">
                    {unreadMessages}
                  </Badge>
                )}
              </div>
            </Button>
          </Link>
        </div>
      </div>
      
      {/* Enhanced Sticky Mobile Action Bar for Active Job */}
      {todaysJobs.filter(job => job.status === 'in_progress').length > 0 && (
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 shadow-lg z-50 lg:hidden">
          {todaysJobs.filter(job => job.status === 'in_progress').map((job) => {
            // Dynamisk tidshantering baserat på aktuell tjänst
            const getCurrentServiceTime = (job) => {
              const currentHour = new Date().getHours()
              
              // Packhjälp: 08:00-12:00
              if (currentHour >= 8 && currentHour < 12 && job.services.includes('Packhjälp')) {
                return getServiceConfig('Packhjälp', job).timeRange
              }
              // Flytt: 12:00-16:00  
              else if (currentHour >= 12 && currentHour < 16 && job.services.includes('Flytt')) {
                return getServiceConfig('Flytt', job).timeRange
              }
              // Städning: 16:00-20:00
              else if (currentHour >= 16 && currentHour < 20 && job.services.includes('Flyttstädning')) {
                return getServiceConfig('Flyttstädning', job).timeRange
              }
              // Fallback till första tjänsten om ingen tid matchar
              else {
                return getServiceConfig(job.services[0], job).timeRange
              }
            }

            const getCurrentServiceName = (job) => {
              const currentHour = new Date().getHours()
              
              if (currentHour >= 8 && currentHour < 12 && job.services.includes('Packhjälp')) {
                return 'Packhjälp'
              } else if (currentHour >= 12 && currentHour < 16 && job.services.includes('Flytt')) {
                return 'Flytt'
              } else if (currentHour >= 16 && currentHour < 20 && job.services.includes('Flyttstädning')) {
                return 'Flyttstädning'
              } else {
                return job.services[0]
              }
            }

            const currentService = getCurrentServiceName(job)
            const currentServiceConfig = getServiceConfig(currentService, job)
            
            return (
              <div key={job.id} className="p-4 space-y-3">
                {/* Job Header med dynamisk tjänst och tid */}
                <div className="flex items-center justify-between">
                  <div className="text-sm font-medium text-gray-600 flex items-center space-x-2">
                    <span>Pågående: {job.customerName}</span>
                    <Badge className={`${currentServiceConfig.bgColor} ${currentServiceConfig.color} text-xs px-2 py-1`}>
                      {currentServiceConfig.emoji} {currentService}
                    </Badge>
                  </div>
                  <div className="text-xs font-medium text-gray-700">
                    {getCurrentServiceTime(job)}
                  </div>
                </div>
              
              {/* Quick Actions Grid */}
              <div className="grid grid-cols-4 gap-2">
                <Button 
                  variant="outline"
                  className="h-12 text-xs font-medium flex flex-col items-center justify-center p-1"
                  onClick={() => {
                    const mapUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodeURIComponent(job.toAddress)}`
                    window.open(mapUrl, '_blank')
                  }}
                >
                  <NavigationIcon className="h-4 w-4 mb-1" />
                  <span>Navigera</span>
                </Button>
                
                <Button 
                  variant="outline"
                  className="h-12 text-xs font-medium flex flex-col items-center justify-center p-1"
                  onClick={() => window.open(`tel:${job.customerPhone}`)}
                >
                  <Phone className="h-4 w-4 mb-1" />
                  <span>Ring kund</span>
                </Button>
                
                <Button 
                  variant="outline"
                  className="h-12 text-xs font-medium flex flex-col items-center justify-center p-1 bg-blue-50 border-blue-200 text-blue-700"
                  onClick={() => {
                    setSelectedJobForPhotos(job)
                    setPhotoPhase('during')
                    setShowPhotoReminders(true)
                  }}
                >
                  <Camera className="h-4 w-4 mb-1" />
                  <span>Foto</span>
                </Button>
                
                <Button 
                  variant="outline"
                  className="h-12 text-xs font-medium flex flex-col items-center justify-center p-1"
                  onClick={() => {
                    setSelectedJobForService(job)
                    setShowAddServiceModal(true)
                  }}
                >
                  <Plus className="h-4 w-4 mb-1" />
                  <span>Tjänst</span>
                </Button>
              </div>
              
              {/* Main Action */}
              <Button 
                className="w-full h-12 bg-green-600 hover:bg-green-700 text-white font-semibold"
                onClick={() => {
                  // Trigger "after" photos before completing
                  setSelectedJobForPhotos(job)
                  setPhotoPhase('after')
                  setShowPhotoReminders(true)
                }}
              >
                <CheckCircle className="h-4 w-4 mr-2" />
                Slutför uppdrag
              </Button>
            </div>
          )
        })}}
        </div>
      )}

      {/* End of Day Button - Only show if user is checked in and it's after 4 PM */}
      {checkinStatus.isCheckedIn && new Date().getHours() >= 16 && (
        <Card className="bg-gradient-to-r from-green-600 to-green-700 text-white border-0">
          <CardContent className="p-4">
            <div className="text-center space-y-3">
              <h3 className="text-lg font-bold">Dags att avsluta dagen?</h3>
              <p className="text-green-100 text-sm">
                Arbetstid idag: {checkinStatus.checkinTime ? 
                  formatDuration(checkinStatus.checkinTime, new Date().toISOString()) : '0h 0m'}
              </p>
              <Button 
                className="w-full bg-white text-green-700 hover:bg-gray-100 font-semibold"
                onClick={() => {
                  // TODO: Implement end of day report
                  console.log('End of day clicked')
                }}
              >
                <CheckCircle className="h-5 w-5 mr-2" />
                Checka ut och skicka dagens rapport
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
      
      
      {/* Add Service Modal */}
      {selectedJobForService && (
        <AddServiceModal
          isOpen={showAddServiceModal}
          onClose={() => {
            setShowAddServiceModal(false)
            setSelectedJobForService(null)
          }}
          jobId={selectedJobForService.id}
          customerName={selectedJobForService.customerName}
          jobData={selectedJobForService}
          onServiceAdded={handleServiceAdded}
        />
      )}
      
      {/* Pre-Start Checklist Modal */}
      {selectedJobForStart && (
        <PreStartChecklistModal
          isOpen={showChecklistModal}
          onClose={() => {
            setShowChecklistModal(false)
            setSelectedJobForStart(null)
          }}
          onStartJob={handleJobStart}
          jobData={selectedJobForStart}
        />
      )}
      
      {/* Job Detail Modal */}
      {selectedJobForDetail && (
        <JobDetailModal
          isOpen={showJobDetailModal}
          onClose={() => {
            setShowJobDetailModal(false)
            setSelectedJobForDetail(null)
          }}
          job={selectedJobForDetail}
          onAddService={handleAddServiceFromDetail}
        />
      )}

      {/* Smart Photo Reminder System */}
      {showPhotoReminders && selectedJobForPhotos && (
        <PhotoReminderSystem
          jobData={{
            serviceType: selectedJobForPhotos.serviceType,
            services: selectedJobForPhotos.services,
            specialRequirements: selectedJobForPhotos.specialRequirements,
            customerName: selectedJobForPhotos.customerName,
            toAddress: selectedJobForPhotos.toAddress
          }}
          currentPhase={photoPhase}
          onPhotoTaken={(reminder) => {
            console.log('Photo taken:', reminder)
            // In real app: store photo data, update job status
          }}
          onDismiss={() => {
            setShowPhotoReminders(false)
            setSelectedJobForPhotos(null)
          }}
        />
      )}
    </div>
  )
}